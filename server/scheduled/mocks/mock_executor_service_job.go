// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/scheduled (interfaces: Job)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockJob struct {
	fail func(message string, callerSkip ...int)
}

func NewMockJob(options ...pegomock.Option) *MockJob {
	mock := &MockJob{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockJob) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockJob) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockJob) Run() {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockJob().")
	}
	params := []pegomock.Param{}
	pegomock.GetGenericMockFrom(mock).Invoke("Run", params, []reflect.Type{})
}

func (mock *MockJob) VerifyWasCalledOnce() *VerifierMockJob {
	return &VerifierMockJob{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockJob) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockJob {
	return &VerifierMockJob{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockJob) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockJob {
	return &VerifierMockJob{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockJob) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockJob {
	return &VerifierMockJob{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockJob struct {
	mock                   *MockJob
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockJob) Run() *MockJob_Run_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Run", params, verifier.timeout)
	return &MockJob_Run_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockJob_Run_OngoingVerification struct {
	mock              *MockJob
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockJob_Run_OngoingVerification) GetCapturedArguments() {
}

func (c *MockJob_Run_OngoingVerification) GetAllCapturedArguments() {
}
