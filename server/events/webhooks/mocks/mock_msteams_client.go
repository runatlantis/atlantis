// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events/webhooks (interfaces: MSTeamsClient)

package mocks

import (
	pegomock "github.com/petergtz/pegomock/v4"
	webhooks "github.com/runatlantis/atlantis/server/events/webhooks"
	"reflect"
	"time"
)

type MockMSTeamsClient struct {
	fail func(message string, callerSkip ...int)
}

func NewMockMSTeamsClient(options ...pegomock.Option) *MockMSTeamsClient {
	mock := &MockMSTeamsClient{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockMSTeamsClient) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockMSTeamsClient) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockMSTeamsClient) PostMessage(webhookURL string, applyResult webhooks.ApplyResult) error {
	if mock == nil {
		panic("mock is nil")
	}
	params := []pegomock.Param{webhookURL, applyResult}
	result := pegomock.GetGenericMockFrom(mock).Invoke("PostMessage", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			_ret0 = result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockMSTeamsClient) VerifyWasCalledOnce() *VerifierMockMSTeamsClient {
	return &VerifierMockMSTeamsClient{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockMSTeamsClient) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockMSTeamsClient {
	return &VerifierMockMSTeamsClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockMSTeamsClient) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockMSTeamsClient {
	return &VerifierMockMSTeamsClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockMSTeamsClient) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockMSTeamsClient {
	return &VerifierMockMSTeamsClient{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockMSTeamsClient struct {
	mock                   *MockMSTeamsClient
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockMSTeamsClient) PostMessage(webhookURL string, applyResult webhooks.ApplyResult) *MockMSTeamsClient_PostMessage_OngoingVerification {
	_params := []pegomock.Param{webhookURL, applyResult}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "PostMessage", _params, verifier.timeout)
	return &MockMSTeamsClient_PostMessage_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockMSTeamsClient_PostMessage_OngoingVerification struct {
	mock              *MockMSTeamsClient
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockMSTeamsClient_PostMessage_OngoingVerification) GetCapturedArguments() (string, webhooks.ApplyResult) {
	webhookURL, applyResult := c.GetAllCapturedArguments()
	return webhookURL[len(webhookURL)-1], applyResult[len(applyResult)-1]
}

func (c *MockMSTeamsClient_PostMessage_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []webhooks.ApplyResult) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]string, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(string)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]webhooks.ApplyResult, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(webhooks.ApplyResult)
			}
		}
	}
	return
}
