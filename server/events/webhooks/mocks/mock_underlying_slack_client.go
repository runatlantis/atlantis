// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events/webhooks (interfaces: UnderlyingSlackClient)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_underlying_slack_client.go -package=mocks . UnderlyingSlackClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	slack "github.com/slack-go/slack"
	gomock "go.uber.org/mock/gomock"
)

// MockUnderlyingSlackClient is a mock of UnderlyingSlackClient interface.
type MockUnderlyingSlackClient struct {
	ctrl     *gomock.Controller
	recorder *MockUnderlyingSlackClientMockRecorder
	isgomock struct{}
}

// MockUnderlyingSlackClientMockRecorder is the mock recorder for MockUnderlyingSlackClient.
type MockUnderlyingSlackClientMockRecorder struct {
	mock *MockUnderlyingSlackClient
}

// NewMockUnderlyingSlackClient creates a new mock instance.
func NewMockUnderlyingSlackClient(ctrl *gomock.Controller) *MockUnderlyingSlackClient {
	mock := &MockUnderlyingSlackClient{ctrl: ctrl}
	mock.recorder = &MockUnderlyingSlackClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnderlyingSlackClient) EXPECT() *MockUnderlyingSlackClientMockRecorder {
	return m.recorder
}

// AuthTest mocks base method.
func (m *MockUnderlyingSlackClient) AuthTest() (*slack.AuthTestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthTest")
	ret0, _ := ret[0].(*slack.AuthTestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthTest indicates an expected call of AuthTest.
func (mr *MockUnderlyingSlackClientMockRecorder) AuthTest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthTest", reflect.TypeOf((*MockUnderlyingSlackClient)(nil).AuthTest))
}

// GetConversations mocks base method.
func (m *MockUnderlyingSlackClient) GetConversations(conversationParams *slack.GetConversationsParameters) ([]slack.Channel, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversations", conversationParams)
	ret0, _ := ret[0].([]slack.Channel)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConversations indicates an expected call of GetConversations.
func (mr *MockUnderlyingSlackClientMockRecorder) GetConversations(conversationParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversations", reflect.TypeOf((*MockUnderlyingSlackClient)(nil).GetConversations), conversationParams)
}

// PostMessage mocks base method.
func (m *MockUnderlyingSlackClient) PostMessage(channelID string, options ...slack.MsgOption) (string, string, error) {
	m.ctrl.T.Helper()
	varargs := []any{channelID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostMessage", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockUnderlyingSlackClientMockRecorder) PostMessage(channelID any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{channelID}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockUnderlyingSlackClient)(nil).PostMessage), varargs...)
}
