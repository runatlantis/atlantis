// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events/vcs (interfaces: PullReqStatusFetcher)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_pull_req_status_fetcher.go -package=mocks github.com/runatlantis/atlantis/server/events/vcs PullReqStatusFetcher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/runatlantis/atlantis/server/events/models"
	logging "github.com/runatlantis/atlantis/server/logging"
	gomock "go.uber.org/mock/gomock"
)

// MockPullReqStatusFetcher is a mock of PullReqStatusFetcher interface.
type MockPullReqStatusFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockPullReqStatusFetcherMockRecorder
	isgomock struct{}
}

// MockPullReqStatusFetcherMockRecorder is the mock recorder for MockPullReqStatusFetcher.
type MockPullReqStatusFetcherMockRecorder struct {
	mock *MockPullReqStatusFetcher
}

// NewMockPullReqStatusFetcher creates a new mock instance.
func NewMockPullReqStatusFetcher(ctrl *gomock.Controller) *MockPullReqStatusFetcher {
	mock := &MockPullReqStatusFetcher{ctrl: ctrl}
	mock.recorder = &MockPullReqStatusFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullReqStatusFetcher) EXPECT() *MockPullReqStatusFetcherMockRecorder {
	return m.recorder
}

// FetchPullStatus mocks base method.
func (m *MockPullReqStatusFetcher) FetchPullStatus(logger logging.SimpleLogging, pull models.PullRequest) (models.PullReqStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPullStatus", logger, pull)
	ret0, _ := ret[0].(models.PullReqStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPullStatus indicates an expected call of FetchPullStatus.
func (mr *MockPullReqStatusFetcherMockRecorder) FetchPullStatus(logger, pull any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPullStatus", reflect.TypeOf((*MockPullReqStatusFetcher)(nil).FetchPullStatus), logger, pull)
}
