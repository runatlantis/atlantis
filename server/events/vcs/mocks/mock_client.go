// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events/vcs (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_client.go -package=mocks github.com/runatlantis/atlantis/server/events/vcs Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/runatlantis/atlantis/server/events/models"
	logging "github.com/runatlantis/atlantis/server/logging"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockClient) CreateComment(logger logging.SimpleLogging, repo models.Repo, pullNum int, comment, command string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", logger, repo, pullNum, comment, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockClientMockRecorder) CreateComment(logger, repo, pullNum, comment, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockClient)(nil).CreateComment), logger, repo, pullNum, comment, command)
}

// DiscardReviews mocks base method.
func (m *MockClient) DiscardReviews(logger logging.SimpleLogging, repo models.Repo, pull models.PullRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscardReviews", logger, repo, pull)
	ret0, _ := ret[0].(error)
	return ret0
}

// DiscardReviews indicates an expected call of DiscardReviews.
func (mr *MockClientMockRecorder) DiscardReviews(logger, repo, pull any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardReviews", reflect.TypeOf((*MockClient)(nil).DiscardReviews), logger, repo, pull)
}

// GetCloneURL mocks base method.
func (m *MockClient) GetCloneURL(logger logging.SimpleLogging, VCSHostType models.VCSHostType, repo string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloneURL", logger, VCSHostType, repo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloneURL indicates an expected call of GetCloneURL.
func (mr *MockClientMockRecorder) GetCloneURL(logger, VCSHostType, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloneURL", reflect.TypeOf((*MockClient)(nil).GetCloneURL), logger, VCSHostType, repo)
}

// GetFileContent mocks base method.
func (m *MockClient) GetFileContent(logger logging.SimpleLogging, pull models.PullRequest, fileName string) (bool, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContent", logger, pull, fileName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFileContent indicates an expected call of GetFileContent.
func (mr *MockClientMockRecorder) GetFileContent(logger, pull, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContent", reflect.TypeOf((*MockClient)(nil).GetFileContent), logger, pull, fileName)
}

// GetModifiedFiles mocks base method.
func (m *MockClient) GetModifiedFiles(logger logging.SimpleLogging, repo models.Repo, pull models.PullRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModifiedFiles", logger, repo, pull)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModifiedFiles indicates an expected call of GetModifiedFiles.
func (mr *MockClientMockRecorder) GetModifiedFiles(logger, repo, pull any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModifiedFiles", reflect.TypeOf((*MockClient)(nil).GetModifiedFiles), logger, repo, pull)
}

// GetPullLabels mocks base method.
func (m *MockClient) GetPullLabels(logger logging.SimpleLogging, repo models.Repo, pull models.PullRequest) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullLabels", logger, repo, pull)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullLabels indicates an expected call of GetPullLabels.
func (mr *MockClientMockRecorder) GetPullLabels(logger, repo, pull any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullLabels", reflect.TypeOf((*MockClient)(nil).GetPullLabels), logger, repo, pull)
}

// GetTeamNamesForUser mocks base method.
func (m *MockClient) GetTeamNamesForUser(logger logging.SimpleLogging, repo models.Repo, user models.User) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamNamesForUser", logger, repo, user)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamNamesForUser indicates an expected call of GetTeamNamesForUser.
func (mr *MockClientMockRecorder) GetTeamNamesForUser(logger, repo, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamNamesForUser", reflect.TypeOf((*MockClient)(nil).GetTeamNamesForUser), logger, repo, user)
}

// HidePrevCommandComments mocks base method.
func (m *MockClient) HidePrevCommandComments(logger logging.SimpleLogging, repo models.Repo, pullNum int, command, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HidePrevCommandComments", logger, repo, pullNum, command, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// HidePrevCommandComments indicates an expected call of HidePrevCommandComments.
func (mr *MockClientMockRecorder) HidePrevCommandComments(logger, repo, pullNum, command, dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HidePrevCommandComments", reflect.TypeOf((*MockClient)(nil).HidePrevCommandComments), logger, repo, pullNum, command, dir)
}

// MarkdownPullLink mocks base method.
func (m *MockClient) MarkdownPullLink(pull models.PullRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkdownPullLink", pull)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkdownPullLink indicates an expected call of MarkdownPullLink.
func (mr *MockClientMockRecorder) MarkdownPullLink(pull any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkdownPullLink", reflect.TypeOf((*MockClient)(nil).MarkdownPullLink), pull)
}

// MergePull mocks base method.
func (m *MockClient) MergePull(logger logging.SimpleLogging, pull models.PullRequest, pullOptions models.PullRequestOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergePull", logger, pull, pullOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergePull indicates an expected call of MergePull.
func (mr *MockClientMockRecorder) MergePull(logger, pull, pullOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergePull", reflect.TypeOf((*MockClient)(nil).MergePull), logger, pull, pullOptions)
}

// PullIsApproved mocks base method.
func (m *MockClient) PullIsApproved(logger logging.SimpleLogging, repo models.Repo, pull models.PullRequest) (models.ApprovalStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullIsApproved", logger, repo, pull)
	ret0, _ := ret[0].(models.ApprovalStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullIsApproved indicates an expected call of PullIsApproved.
func (mr *MockClientMockRecorder) PullIsApproved(logger, repo, pull any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullIsApproved", reflect.TypeOf((*MockClient)(nil).PullIsApproved), logger, repo, pull)
}

// PullIsMergeable mocks base method.
func (m *MockClient) PullIsMergeable(logger logging.SimpleLogging, repo models.Repo, pull models.PullRequest, vcsstatusname string, ignoreVCSStatusNames []string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullIsMergeable", logger, repo, pull, vcsstatusname, ignoreVCSStatusNames)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullIsMergeable indicates an expected call of PullIsMergeable.
func (mr *MockClientMockRecorder) PullIsMergeable(logger, repo, pull, vcsstatusname, ignoreVCSStatusNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullIsMergeable", reflect.TypeOf((*MockClient)(nil).PullIsMergeable), logger, repo, pull, vcsstatusname, ignoreVCSStatusNames)
}

// ReactToComment mocks base method.
func (m *MockClient) ReactToComment(logger logging.SimpleLogging, repo models.Repo, pullNum int, commentID int64, reaction string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReactToComment", logger, repo, pullNum, commentID, reaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReactToComment indicates an expected call of ReactToComment.
func (mr *MockClientMockRecorder) ReactToComment(logger, repo, pullNum, commentID, reaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReactToComment", reflect.TypeOf((*MockClient)(nil).ReactToComment), logger, repo, pullNum, commentID, reaction)
}

// SupportsSingleFileDownload mocks base method.
func (m *MockClient) SupportsSingleFileDownload(repo models.Repo) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsSingleFileDownload", repo)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportsSingleFileDownload indicates an expected call of SupportsSingleFileDownload.
func (mr *MockClientMockRecorder) SupportsSingleFileDownload(repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsSingleFileDownload", reflect.TypeOf((*MockClient)(nil).SupportsSingleFileDownload), repo)
}

// UpdateStatus mocks base method.
func (m *MockClient) UpdateStatus(logger logging.SimpleLogging, repo models.Repo, pull models.PullRequest, state models.CommitStatus, src, description, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", logger, repo, pull, state, src, description, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockClientMockRecorder) UpdateStatus(logger, repo, pull, state, src, description, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockClient)(nil).UpdateStatus), logger, repo, pull, state, src, description, url)
}
