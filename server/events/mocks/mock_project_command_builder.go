// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: ProjectCommandBuilder)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_project_command_builder.go -package=mocks github.com/runatlantis/atlantis/server/events ProjectCommandBuilder
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	events "github.com/runatlantis/atlantis/server/events"
	command "github.com/runatlantis/atlantis/server/events/command"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectCommandBuilder is a mock of ProjectCommandBuilder interface.
type MockProjectCommandBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockProjectCommandBuilderMockRecorder
	isgomock struct{}
}

// MockProjectCommandBuilderMockRecorder is the mock recorder for MockProjectCommandBuilder.
type MockProjectCommandBuilderMockRecorder struct {
	mock *MockProjectCommandBuilder
}

// NewMockProjectCommandBuilder creates a new mock instance.
func NewMockProjectCommandBuilder(ctrl *gomock.Controller) *MockProjectCommandBuilder {
	mock := &MockProjectCommandBuilder{ctrl: ctrl}
	mock.recorder = &MockProjectCommandBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectCommandBuilder) EXPECT() *MockProjectCommandBuilderMockRecorder {
	return m.recorder
}

// BuildApplyCommands mocks base method.
func (m *MockProjectCommandBuilder) BuildApplyCommands(ctx *command.Context, comment *events.CommentCommand) ([]command.ProjectContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildApplyCommands", ctx, comment)
	ret0, _ := ret[0].([]command.ProjectContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildApplyCommands indicates an expected call of BuildApplyCommands.
func (mr *MockProjectCommandBuilderMockRecorder) BuildApplyCommands(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildApplyCommands", reflect.TypeOf((*MockProjectCommandBuilder)(nil).BuildApplyCommands), ctx, comment)
}

// BuildApprovePoliciesCommands mocks base method.
func (m *MockProjectCommandBuilder) BuildApprovePoliciesCommands(ctx *command.Context, comment *events.CommentCommand) ([]command.ProjectContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildApprovePoliciesCommands", ctx, comment)
	ret0, _ := ret[0].([]command.ProjectContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildApprovePoliciesCommands indicates an expected call of BuildApprovePoliciesCommands.
func (mr *MockProjectCommandBuilderMockRecorder) BuildApprovePoliciesCommands(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildApprovePoliciesCommands", reflect.TypeOf((*MockProjectCommandBuilder)(nil).BuildApprovePoliciesCommands), ctx, comment)
}

// BuildAutoplanCommands mocks base method.
func (m *MockProjectCommandBuilder) BuildAutoplanCommands(ctx *command.Context) ([]command.ProjectContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAutoplanCommands", ctx)
	ret0, _ := ret[0].([]command.ProjectContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildAutoplanCommands indicates an expected call of BuildAutoplanCommands.
func (mr *MockProjectCommandBuilderMockRecorder) BuildAutoplanCommands(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAutoplanCommands", reflect.TypeOf((*MockProjectCommandBuilder)(nil).BuildAutoplanCommands), ctx)
}

// BuildImportCommands mocks base method.
func (m *MockProjectCommandBuilder) BuildImportCommands(ctx *command.Context, comment *events.CommentCommand) ([]command.ProjectContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildImportCommands", ctx, comment)
	ret0, _ := ret[0].([]command.ProjectContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildImportCommands indicates an expected call of BuildImportCommands.
func (mr *MockProjectCommandBuilderMockRecorder) BuildImportCommands(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildImportCommands", reflect.TypeOf((*MockProjectCommandBuilder)(nil).BuildImportCommands), ctx, comment)
}

// BuildPlanCommands mocks base method.
func (m *MockProjectCommandBuilder) BuildPlanCommands(ctx *command.Context, comment *events.CommentCommand) ([]command.ProjectContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildPlanCommands", ctx, comment)
	ret0, _ := ret[0].([]command.ProjectContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildPlanCommands indicates an expected call of BuildPlanCommands.
func (mr *MockProjectCommandBuilderMockRecorder) BuildPlanCommands(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPlanCommands", reflect.TypeOf((*MockProjectCommandBuilder)(nil).BuildPlanCommands), ctx, comment)
}

// BuildStateRmCommands mocks base method.
func (m *MockProjectCommandBuilder) BuildStateRmCommands(ctx *command.Context, comment *events.CommentCommand) ([]command.ProjectContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildStateRmCommands", ctx, comment)
	ret0, _ := ret[0].([]command.ProjectContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildStateRmCommands indicates an expected call of BuildStateRmCommands.
func (mr *MockProjectCommandBuilderMockRecorder) BuildStateRmCommands(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildStateRmCommands", reflect.TypeOf((*MockProjectCommandBuilder)(nil).BuildStateRmCommands), ctx, comment)
}

// BuildVersionCommands mocks base method.
func (m *MockProjectCommandBuilder) BuildVersionCommands(ctx *command.Context, comment *events.CommentCommand) ([]command.ProjectContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildVersionCommands", ctx, comment)
	ret0, _ := ret[0].([]command.ProjectContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildVersionCommands indicates an expected call of BuildVersionCommands.
func (mr *MockProjectCommandBuilderMockRecorder) BuildVersionCommands(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildVersionCommands", reflect.TypeOf((*MockProjectCommandBuilder)(nil).BuildVersionCommands), ctx, comment)
}
