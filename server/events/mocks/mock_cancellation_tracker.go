// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: CancellationTracker)

package mocks

import (
	pegomock "github.com/petergtz/pegomock/v4"
	models "github.com/runatlantis/atlantis/server/events/models"
	"reflect"
	"time"
)

type MockCancellationTracker struct {
	fail func(message string, callerSkip ...int)
}

func NewMockCancellationTracker(options ...pegomock.Option) *MockCancellationTracker {
	mock := &MockCancellationTracker{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockCancellationTracker) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockCancellationTracker) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockCancellationTracker) Cancel(pull models.PullRequest) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockCancellationTracker().")
	}
	_params := []pegomock.Param{pull}
	pegomock.GetGenericMockFrom(mock).Invoke("Cancel", _params, []reflect.Type{})
}

func (mock *MockCancellationTracker) Clear(pull models.PullRequest) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockCancellationTracker().")
	}
	_params := []pegomock.Param{pull}
	pegomock.GetGenericMockFrom(mock).Invoke("Clear", _params, []reflect.Type{})
}

func (mock *MockCancellationTracker) IsCancelled(pull models.PullRequest) bool {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockCancellationTracker().")
	}
	_params := []pegomock.Param{pull}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("IsCancelled", _params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem()})
	var _ret0 bool
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(bool)
		}
	}
	return _ret0
}

func (mock *MockCancellationTracker) VerifyWasCalledOnce() *VerifierMockCancellationTracker {
	return &VerifierMockCancellationTracker{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockCancellationTracker) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockCancellationTracker {
	return &VerifierMockCancellationTracker{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockCancellationTracker) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockCancellationTracker {
	return &VerifierMockCancellationTracker{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockCancellationTracker) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockCancellationTracker {
	return &VerifierMockCancellationTracker{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockCancellationTracker struct {
	mock                   *MockCancellationTracker
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockCancellationTracker) Cancel(pull models.PullRequest) *MockCancellationTracker_Cancel_OngoingVerification {
	_params := []pegomock.Param{pull}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Cancel", _params, verifier.timeout)
	return &MockCancellationTracker_Cancel_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockCancellationTracker_Cancel_OngoingVerification struct {
	mock              *MockCancellationTracker
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockCancellationTracker_Cancel_OngoingVerification) GetCapturedArguments() models.PullRequest {
	pull := c.GetAllCapturedArguments()
	return pull[len(pull)-1]
}

func (c *MockCancellationTracker_Cancel_OngoingVerification) GetAllCapturedArguments() (_param0 []models.PullRequest) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]models.PullRequest, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(models.PullRequest)
			}
		}
	}
	return
}

func (verifier *VerifierMockCancellationTracker) Clear(pull models.PullRequest) *MockCancellationTracker_Clear_OngoingVerification {
	_params := []pegomock.Param{pull}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Clear", _params, verifier.timeout)
	return &MockCancellationTracker_Clear_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockCancellationTracker_Clear_OngoingVerification struct {
	mock              *MockCancellationTracker
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockCancellationTracker_Clear_OngoingVerification) GetCapturedArguments() models.PullRequest {
	pull := c.GetAllCapturedArguments()
	return pull[len(pull)-1]
}

func (c *MockCancellationTracker_Clear_OngoingVerification) GetAllCapturedArguments() (_param0 []models.PullRequest) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]models.PullRequest, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(models.PullRequest)
			}
		}
	}
	return
}

func (verifier *VerifierMockCancellationTracker) IsCancelled(pull models.PullRequest) *MockCancellationTracker_IsCancelled_OngoingVerification {
	_params := []pegomock.Param{pull}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "IsCancelled", _params, verifier.timeout)
	return &MockCancellationTracker_IsCancelled_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockCancellationTracker_IsCancelled_OngoingVerification struct {
	mock              *MockCancellationTracker
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockCancellationTracker_IsCancelled_OngoingVerification) GetCapturedArguments() models.PullRequest {
	pull := c.GetAllCapturedArguments()
	return pull[len(pull)-1]
}

func (c *MockCancellationTracker_IsCancelled_OngoingVerification) GetAllCapturedArguments() (_param0 []models.PullRequest) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]models.PullRequest, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(models.PullRequest)
			}
		}
	}
	return
}
