// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: ProjectCommandRunner)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_project_command_runner.go -package=mocks . ProjectCommandRunner
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	command "github.com/runatlantis/atlantis/server/events/command"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectCommandRunner is a mock of ProjectCommandRunner interface.
type MockProjectCommandRunner struct {
	ctrl     *gomock.Controller
	recorder *MockProjectCommandRunnerMockRecorder
	isgomock struct{}
}

// MockProjectCommandRunnerMockRecorder is the mock recorder for MockProjectCommandRunner.
type MockProjectCommandRunnerMockRecorder struct {
	mock *MockProjectCommandRunner
}

// NewMockProjectCommandRunner creates a new mock instance.
func NewMockProjectCommandRunner(ctrl *gomock.Controller) *MockProjectCommandRunner {
	mock := &MockProjectCommandRunner{ctrl: ctrl}
	mock.recorder = &MockProjectCommandRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectCommandRunner) EXPECT() *MockProjectCommandRunnerMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockProjectCommandRunner) Apply(ctx command.ProjectContext) command.ProjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx)
	ret0, _ := ret[0].(command.ProjectResult)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockProjectCommandRunnerMockRecorder) Apply(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockProjectCommandRunner)(nil).Apply), ctx)
}

// ApprovePolicies mocks base method.
func (m *MockProjectCommandRunner) ApprovePolicies(ctx command.ProjectContext) command.ProjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApprovePolicies", ctx)
	ret0, _ := ret[0].(command.ProjectResult)
	return ret0
}

// ApprovePolicies indicates an expected call of ApprovePolicies.
func (mr *MockProjectCommandRunnerMockRecorder) ApprovePolicies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApprovePolicies", reflect.TypeOf((*MockProjectCommandRunner)(nil).ApprovePolicies), ctx)
}

// Import mocks base method.
func (m *MockProjectCommandRunner) Import(ctx command.ProjectContext) command.ProjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", ctx)
	ret0, _ := ret[0].(command.ProjectResult)
	return ret0
}

// Import indicates an expected call of Import.
func (mr *MockProjectCommandRunnerMockRecorder) Import(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockProjectCommandRunner)(nil).Import), ctx)
}

// Plan mocks base method.
func (m *MockProjectCommandRunner) Plan(ctx command.ProjectContext) command.ProjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plan", ctx)
	ret0, _ := ret[0].(command.ProjectResult)
	return ret0
}

// Plan indicates an expected call of Plan.
func (mr *MockProjectCommandRunnerMockRecorder) Plan(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plan", reflect.TypeOf((*MockProjectCommandRunner)(nil).Plan), ctx)
}

// PolicyCheck mocks base method.
func (m *MockProjectCommandRunner) PolicyCheck(ctx command.ProjectContext) command.ProjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PolicyCheck", ctx)
	ret0, _ := ret[0].(command.ProjectResult)
	return ret0
}

// PolicyCheck indicates an expected call of PolicyCheck.
func (mr *MockProjectCommandRunnerMockRecorder) PolicyCheck(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PolicyCheck", reflect.TypeOf((*MockProjectCommandRunner)(nil).PolicyCheck), ctx)
}

// StateRm mocks base method.
func (m *MockProjectCommandRunner) StateRm(ctx command.ProjectContext) command.ProjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateRm", ctx)
	ret0, _ := ret[0].(command.ProjectResult)
	return ret0
}

// StateRm indicates an expected call of StateRm.
func (mr *MockProjectCommandRunnerMockRecorder) StateRm(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateRm", reflect.TypeOf((*MockProjectCommandRunner)(nil).StateRm), ctx)
}

// Version mocks base method.
func (m *MockProjectCommandRunner) Version(ctx command.ProjectContext) command.ProjectResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", ctx)
	ret0, _ := ret[0].(command.ProjectResult)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockProjectCommandRunnerMockRecorder) Version(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockProjectCommandRunner)(nil).Version), ctx)
}
