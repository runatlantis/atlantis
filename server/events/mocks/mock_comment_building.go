// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: CommentBuilder)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_comment_building.go -package=mocks . CommentBuilder
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommentBuilder is a mock of CommentBuilder interface.
type MockCommentBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockCommentBuilderMockRecorder
	isgomock struct{}
}

// MockCommentBuilderMockRecorder is the mock recorder for MockCommentBuilder.
type MockCommentBuilderMockRecorder struct {
	mock *MockCommentBuilder
}

// NewMockCommentBuilder creates a new mock instance.
func NewMockCommentBuilder(ctrl *gomock.Controller) *MockCommentBuilder {
	mock := &MockCommentBuilder{ctrl: ctrl}
	mock.recorder = &MockCommentBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentBuilder) EXPECT() *MockCommentBuilderMockRecorder {
	return m.recorder
}

// BuildApplyComment mocks base method.
func (m *MockCommentBuilder) BuildApplyComment(repoRelDir, workspace, project string, autoMergeDisabled bool, autoMergeMethod string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildApplyComment", repoRelDir, workspace, project, autoMergeDisabled, autoMergeMethod)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildApplyComment indicates an expected call of BuildApplyComment.
func (mr *MockCommentBuilderMockRecorder) BuildApplyComment(repoRelDir, workspace, project, autoMergeDisabled, autoMergeMethod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildApplyComment", reflect.TypeOf((*MockCommentBuilder)(nil).BuildApplyComment), repoRelDir, workspace, project, autoMergeDisabled, autoMergeMethod)
}

// BuildApprovePoliciesComment mocks base method.
func (m *MockCommentBuilder) BuildApprovePoliciesComment(repoRelDir, workspace, project string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildApprovePoliciesComment", repoRelDir, workspace, project)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildApprovePoliciesComment indicates an expected call of BuildApprovePoliciesComment.
func (mr *MockCommentBuilderMockRecorder) BuildApprovePoliciesComment(repoRelDir, workspace, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildApprovePoliciesComment", reflect.TypeOf((*MockCommentBuilder)(nil).BuildApprovePoliciesComment), repoRelDir, workspace, project)
}

// BuildPlanComment mocks base method.
func (m *MockCommentBuilder) BuildPlanComment(repoRelDir, workspace, project string, commentArgs []string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildPlanComment", repoRelDir, workspace, project, commentArgs)
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildPlanComment indicates an expected call of BuildPlanComment.
func (mr *MockCommentBuilderMockRecorder) BuildPlanComment(repoRelDir, workspace, project, commentArgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPlanComment", reflect.TypeOf((*MockCommentBuilder)(nil).BuildPlanComment), repoRelDir, workspace, project, commentArgs)
}
