// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: StepRunner)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_step_runner.go -package=mocks . StepRunner
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	command "github.com/runatlantis/atlantis/server/events/command"
	gomock "go.uber.org/mock/gomock"
)

// MockStepRunner is a mock of StepRunner interface.
type MockStepRunner struct {
	ctrl     *gomock.Controller
	recorder *MockStepRunnerMockRecorder
	isgomock struct{}
}

// MockStepRunnerMockRecorder is the mock recorder for MockStepRunner.
type MockStepRunnerMockRecorder struct {
	mock *MockStepRunner
}

// NewMockStepRunner creates a new mock instance.
func NewMockStepRunner(ctrl *gomock.Controller) *MockStepRunner {
	mock := &MockStepRunner{ctrl: ctrl}
	mock.recorder = &MockStepRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStepRunner) EXPECT() *MockStepRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockStepRunner) Run(ctx command.ProjectContext, extraArgs []string, path string, envs map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, extraArgs, path, envs)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockStepRunnerMockRecorder) Run(ctx, extraArgs, path, envs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStepRunner)(nil).Run), ctx, extraArgs, path, envs)
}
