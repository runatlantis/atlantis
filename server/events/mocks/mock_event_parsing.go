// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: EventParsing)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_event_parsing.go -package=mocks github.com/runatlantis/atlantis/server/events EventParsing
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gitea "code.gitea.io/sdk/gitea"
	azuredevops "github.com/drmaxgit/go-azuredevops/azuredevops"
	github "github.com/google/go-github/v71/github"
	models "github.com/runatlantis/atlantis/server/events/models"
	gitea0 "github.com/runatlantis/atlantis/server/events/vcs/gitea"
	logging "github.com/runatlantis/atlantis/server/logging"
	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockEventParsing is a mock of EventParsing interface.
type MockEventParsing struct {
	ctrl     *gomock.Controller
	recorder *MockEventParsingMockRecorder
	isgomock struct{}
}

// MockEventParsingMockRecorder is the mock recorder for MockEventParsing.
type MockEventParsingMockRecorder struct {
	mock *MockEventParsing
}

// NewMockEventParsing creates a new mock instance.
func NewMockEventParsing(ctrl *gomock.Controller) *MockEventParsing {
	mock := &MockEventParsing{ctrl: ctrl}
	mock.recorder = &MockEventParsingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventParsing) EXPECT() *MockEventParsingMockRecorder {
	return m.recorder
}

// GetBitbucketCloudPullEventType mocks base method.
func (m *MockEventParsing) GetBitbucketCloudPullEventType(eventTypeHeader, sha, pr string) models.PullRequestEventType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBitbucketCloudPullEventType", eventTypeHeader, sha, pr)
	ret0, _ := ret[0].(models.PullRequestEventType)
	return ret0
}

// GetBitbucketCloudPullEventType indicates an expected call of GetBitbucketCloudPullEventType.
func (mr *MockEventParsingMockRecorder) GetBitbucketCloudPullEventType(eventTypeHeader, sha, pr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBitbucketCloudPullEventType", reflect.TypeOf((*MockEventParsing)(nil).GetBitbucketCloudPullEventType), eventTypeHeader, sha, pr)
}

// GetBitbucketServerPullEventType mocks base method.
func (m *MockEventParsing) GetBitbucketServerPullEventType(eventTypeHeader string) models.PullRequestEventType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBitbucketServerPullEventType", eventTypeHeader)
	ret0, _ := ret[0].(models.PullRequestEventType)
	return ret0
}

// GetBitbucketServerPullEventType indicates an expected call of GetBitbucketServerPullEventType.
func (mr *MockEventParsingMockRecorder) GetBitbucketServerPullEventType(eventTypeHeader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBitbucketServerPullEventType", reflect.TypeOf((*MockEventParsing)(nil).GetBitbucketServerPullEventType), eventTypeHeader)
}

// ParseAPIPlanRequest mocks base method.
func (m *MockEventParsing) ParseAPIPlanRequest(vcsHostType models.VCSHostType, path, cloneURL string) (models.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAPIPlanRequest", vcsHostType, path, cloneURL)
	ret0, _ := ret[0].(models.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAPIPlanRequest indicates an expected call of ParseAPIPlanRequest.
func (mr *MockEventParsingMockRecorder) ParseAPIPlanRequest(vcsHostType, path, cloneURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAPIPlanRequest", reflect.TypeOf((*MockEventParsing)(nil).ParseAPIPlanRequest), vcsHostType, path, cloneURL)
}

// ParseAzureDevopsPull mocks base method.
func (m *MockEventParsing) ParseAzureDevopsPull(adPull *azuredevops.GitPullRequest) (models.PullRequest, models.Repo, models.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAzureDevopsPull", adPull)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ParseAzureDevopsPull indicates an expected call of ParseAzureDevopsPull.
func (mr *MockEventParsingMockRecorder) ParseAzureDevopsPull(adPull any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAzureDevopsPull", reflect.TypeOf((*MockEventParsing)(nil).ParseAzureDevopsPull), adPull)
}

// ParseAzureDevopsPullEvent mocks base method.
func (m *MockEventParsing) ParseAzureDevopsPullEvent(pullEvent azuredevops.Event) (models.PullRequest, models.PullRequestEventType, models.Repo, models.Repo, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAzureDevopsPullEvent", pullEvent)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.PullRequestEventType)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.Repo)
	ret4, _ := ret[4].(models.User)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// ParseAzureDevopsPullEvent indicates an expected call of ParseAzureDevopsPullEvent.
func (mr *MockEventParsingMockRecorder) ParseAzureDevopsPullEvent(pullEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAzureDevopsPullEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseAzureDevopsPullEvent), pullEvent)
}

// ParseAzureDevopsRepo mocks base method.
func (m *MockEventParsing) ParseAzureDevopsRepo(adRepo *azuredevops.GitRepository) (models.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAzureDevopsRepo", adRepo)
	ret0, _ := ret[0].(models.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAzureDevopsRepo indicates an expected call of ParseAzureDevopsRepo.
func (mr *MockEventParsingMockRecorder) ParseAzureDevopsRepo(adRepo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAzureDevopsRepo", reflect.TypeOf((*MockEventParsing)(nil).ParseAzureDevopsRepo), adRepo)
}

// ParseBitbucketCloudPullCommentEvent mocks base method.
func (m *MockEventParsing) ParseBitbucketCloudPullCommentEvent(body []byte) (models.PullRequest, models.Repo, models.Repo, models.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBitbucketCloudPullCommentEvent", body)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.User)
	ret4, _ := ret[4].(string)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// ParseBitbucketCloudPullCommentEvent indicates an expected call of ParseBitbucketCloudPullCommentEvent.
func (mr *MockEventParsingMockRecorder) ParseBitbucketCloudPullCommentEvent(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBitbucketCloudPullCommentEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseBitbucketCloudPullCommentEvent), body)
}

// ParseBitbucketCloudPullEvent mocks base method.
func (m *MockEventParsing) ParseBitbucketCloudPullEvent(body []byte) (models.PullRequest, models.Repo, models.Repo, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBitbucketCloudPullEvent", body)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.User)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ParseBitbucketCloudPullEvent indicates an expected call of ParseBitbucketCloudPullEvent.
func (mr *MockEventParsingMockRecorder) ParseBitbucketCloudPullEvent(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBitbucketCloudPullEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseBitbucketCloudPullEvent), body)
}

// ParseBitbucketServerPullCommentEvent mocks base method.
func (m *MockEventParsing) ParseBitbucketServerPullCommentEvent(body []byte) (models.PullRequest, models.Repo, models.Repo, models.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBitbucketServerPullCommentEvent", body)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.User)
	ret4, _ := ret[4].(string)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// ParseBitbucketServerPullCommentEvent indicates an expected call of ParseBitbucketServerPullCommentEvent.
func (mr *MockEventParsingMockRecorder) ParseBitbucketServerPullCommentEvent(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBitbucketServerPullCommentEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseBitbucketServerPullCommentEvent), body)
}

// ParseBitbucketServerPullEvent mocks base method.
func (m *MockEventParsing) ParseBitbucketServerPullEvent(body []byte) (models.PullRequest, models.Repo, models.Repo, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBitbucketServerPullEvent", body)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.User)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ParseBitbucketServerPullEvent indicates an expected call of ParseBitbucketServerPullEvent.
func (mr *MockEventParsingMockRecorder) ParseBitbucketServerPullEvent(body any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBitbucketServerPullEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseBitbucketServerPullEvent), body)
}

// ParseGiteaIssueCommentEvent mocks base method.
func (m *MockEventParsing) ParseGiteaIssueCommentEvent(event gitea0.GiteaIssueCommentPayload) (models.Repo, models.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGiteaIssueCommentEvent", event)
	ret0, _ := ret[0].(models.Repo)
	ret1, _ := ret[1].(models.User)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ParseGiteaIssueCommentEvent indicates an expected call of ParseGiteaIssueCommentEvent.
func (mr *MockEventParsingMockRecorder) ParseGiteaIssueCommentEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGiteaIssueCommentEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseGiteaIssueCommentEvent), event)
}

// ParseGiteaPull mocks base method.
func (m *MockEventParsing) ParseGiteaPull(pull *gitea.PullRequest) (models.PullRequest, models.Repo, models.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGiteaPull", pull)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ParseGiteaPull indicates an expected call of ParseGiteaPull.
func (mr *MockEventParsingMockRecorder) ParseGiteaPull(pull any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGiteaPull", reflect.TypeOf((*MockEventParsing)(nil).ParseGiteaPull), pull)
}

// ParseGiteaPullRequestEvent mocks base method.
func (m *MockEventParsing) ParseGiteaPullRequestEvent(event gitea.PullRequest) (models.PullRequest, models.PullRequestEventType, models.Repo, models.Repo, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGiteaPullRequestEvent", event)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.PullRequestEventType)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.Repo)
	ret4, _ := ret[4].(models.User)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// ParseGiteaPullRequestEvent indicates an expected call of ParseGiteaPullRequestEvent.
func (mr *MockEventParsingMockRecorder) ParseGiteaPullRequestEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGiteaPullRequestEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseGiteaPullRequestEvent), event)
}

// ParseGithubIssueCommentEvent mocks base method.
func (m *MockEventParsing) ParseGithubIssueCommentEvent(logger logging.SimpleLogging, comment *github.IssueCommentEvent) (models.Repo, models.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGithubIssueCommentEvent", logger, comment)
	ret0, _ := ret[0].(models.Repo)
	ret1, _ := ret[1].(models.User)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ParseGithubIssueCommentEvent indicates an expected call of ParseGithubIssueCommentEvent.
func (mr *MockEventParsingMockRecorder) ParseGithubIssueCommentEvent(logger, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGithubIssueCommentEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseGithubIssueCommentEvent), logger, comment)
}

// ParseGithubPull mocks base method.
func (m *MockEventParsing) ParseGithubPull(logger logging.SimpleLogging, ghPull *github.PullRequest) (models.PullRequest, models.Repo, models.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGithubPull", logger, ghPull)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ParseGithubPull indicates an expected call of ParseGithubPull.
func (mr *MockEventParsingMockRecorder) ParseGithubPull(logger, ghPull any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGithubPull", reflect.TypeOf((*MockEventParsing)(nil).ParseGithubPull), logger, ghPull)
}

// ParseGithubPullEvent mocks base method.
func (m *MockEventParsing) ParseGithubPullEvent(logger logging.SimpleLogging, pullEvent *github.PullRequestEvent) (models.PullRequest, models.PullRequestEventType, models.Repo, models.Repo, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGithubPullEvent", logger, pullEvent)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.PullRequestEventType)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.Repo)
	ret4, _ := ret[4].(models.User)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// ParseGithubPullEvent indicates an expected call of ParseGithubPullEvent.
func (mr *MockEventParsingMockRecorder) ParseGithubPullEvent(logger, pullEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGithubPullEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseGithubPullEvent), logger, pullEvent)
}

// ParseGithubRepo mocks base method.
func (m *MockEventParsing) ParseGithubRepo(ghRepo *github.Repository) (models.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGithubRepo", ghRepo)
	ret0, _ := ret[0].(models.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseGithubRepo indicates an expected call of ParseGithubRepo.
func (mr *MockEventParsingMockRecorder) ParseGithubRepo(ghRepo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGithubRepo", reflect.TypeOf((*MockEventParsing)(nil).ParseGithubRepo), ghRepo)
}

// ParseGitlabMergeRequest mocks base method.
func (m *MockEventParsing) ParseGitlabMergeRequest(mr *gitlab.MergeRequest, baseRepo models.Repo) models.PullRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGitlabMergeRequest", mr, baseRepo)
	ret0, _ := ret[0].(models.PullRequest)
	return ret0
}

// ParseGitlabMergeRequest indicates an expected call of ParseGitlabMergeRequest.
func (mr_2 *MockEventParsingMockRecorder) ParseGitlabMergeRequest(mr, baseRepo any) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "ParseGitlabMergeRequest", reflect.TypeOf((*MockEventParsing)(nil).ParseGitlabMergeRequest), mr, baseRepo)
}

// ParseGitlabMergeRequestCommentEvent mocks base method.
func (m *MockEventParsing) ParseGitlabMergeRequestCommentEvent(event gitlab.MergeCommentEvent) (models.Repo, models.Repo, int, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGitlabMergeRequestCommentEvent", event)
	ret0, _ := ret[0].(models.Repo)
	ret1, _ := ret[1].(models.Repo)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(models.User)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// ParseGitlabMergeRequestCommentEvent indicates an expected call of ParseGitlabMergeRequestCommentEvent.
func (mr *MockEventParsingMockRecorder) ParseGitlabMergeRequestCommentEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGitlabMergeRequestCommentEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseGitlabMergeRequestCommentEvent), event)
}

// ParseGitlabMergeRequestEvent mocks base method.
func (m *MockEventParsing) ParseGitlabMergeRequestEvent(event gitlab.MergeEvent) (models.PullRequest, models.PullRequestEventType, models.Repo, models.Repo, models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGitlabMergeRequestEvent", event)
	ret0, _ := ret[0].(models.PullRequest)
	ret1, _ := ret[1].(models.PullRequestEventType)
	ret2, _ := ret[2].(models.Repo)
	ret3, _ := ret[3].(models.Repo)
	ret4, _ := ret[4].(models.User)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// ParseGitlabMergeRequestEvent indicates an expected call of ParseGitlabMergeRequestEvent.
func (mr *MockEventParsingMockRecorder) ParseGitlabMergeRequestEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGitlabMergeRequestEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseGitlabMergeRequestEvent), event)
}

// ParseGitlabMergeRequestUpdateEvent mocks base method.
func (m *MockEventParsing) ParseGitlabMergeRequestUpdateEvent(event gitlab.MergeEvent) models.PullRequestEventType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGitlabMergeRequestUpdateEvent", event)
	ret0, _ := ret[0].(models.PullRequestEventType)
	return ret0
}

// ParseGitlabMergeRequestUpdateEvent indicates an expected call of ParseGitlabMergeRequestUpdateEvent.
func (mr *MockEventParsingMockRecorder) ParseGitlabMergeRequestUpdateEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGitlabMergeRequestUpdateEvent", reflect.TypeOf((*MockEventParsing)(nil).ParseGitlabMergeRequestUpdateEvent), event)
}
