// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: JobURLGenerator)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	models "github.com/runatlantis/atlantis/server/events/models"
	"reflect"
	"time"
)

type MockJobURLGenerator struct {
	fail func(message string, callerSkip ...int)
}

func NewMockJobURLGenerator(options ...pegomock.Option) *MockJobURLGenerator {
	mock := &MockJobURLGenerator{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockJobURLGenerator) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockJobURLGenerator) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockJobURLGenerator) GenerateJobURL(pull models.PullRequest) string {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockJobURLGenerator().")
	}
	params := []pegomock.Param{pull}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GenerateJobURL", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem()})
	var ret0 string
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
	}
	return ret0
}

func (mock *MockJobURLGenerator) VerifyWasCalledOnce() *VerifierMockJobURLGenerator {
	return &VerifierMockJobURLGenerator{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockJobURLGenerator) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockJobURLGenerator {
	return &VerifierMockJobURLGenerator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockJobURLGenerator) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockJobURLGenerator {
	return &VerifierMockJobURLGenerator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockJobURLGenerator) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockJobURLGenerator {
	return &VerifierMockJobURLGenerator{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockJobURLGenerator struct {
	mock                   *MockJobURLGenerator
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockJobURLGenerator) GenerateJobURL(pull models.PullRequest) *MockJobURLGenerator_GenerateJobURL_OngoingVerification {
	params := []pegomock.Param{pull}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GenerateJobURL", params, verifier.timeout)
	return &MockJobURLGenerator_GenerateJobURL_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockJobURLGenerator_GenerateJobURL_OngoingVerification struct {
	mock              *MockJobURLGenerator
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockJobURLGenerator_GenerateJobURL_OngoingVerification) GetCapturedArguments() models.PullRequest {
	pull := c.GetAllCapturedArguments()
	return pull[len(pull)-1]
}

func (c *MockJobURLGenerator_GenerateJobURL_OngoingVerification) GetAllCapturedArguments() (_param0 []models.PullRequest) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]models.PullRequest, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(models.PullRequest)
		}
	}
	return
}
