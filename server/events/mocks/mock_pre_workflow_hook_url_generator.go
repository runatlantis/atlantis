// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: PreWorkflowHookURLGenerator)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_pre_workflow_hook_url_generator.go -package=mocks . PreWorkflowHookURLGenerator
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPreWorkflowHookURLGenerator is a mock of PreWorkflowHookURLGenerator interface.
type MockPreWorkflowHookURLGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockPreWorkflowHookURLGeneratorMockRecorder
	isgomock struct{}
}

// MockPreWorkflowHookURLGeneratorMockRecorder is the mock recorder for MockPreWorkflowHookURLGenerator.
type MockPreWorkflowHookURLGeneratorMockRecorder struct {
	mock *MockPreWorkflowHookURLGenerator
}

// NewMockPreWorkflowHookURLGenerator creates a new mock instance.
func NewMockPreWorkflowHookURLGenerator(ctrl *gomock.Controller) *MockPreWorkflowHookURLGenerator {
	mock := &MockPreWorkflowHookURLGenerator{ctrl: ctrl}
	mock.recorder = &MockPreWorkflowHookURLGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreWorkflowHookURLGenerator) EXPECT() *MockPreWorkflowHookURLGeneratorMockRecorder {
	return m.recorder
}

// GenerateProjectWorkflowHookURL mocks base method.
func (m *MockPreWorkflowHookURLGenerator) GenerateProjectWorkflowHookURL(hookID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateProjectWorkflowHookURL", hookID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateProjectWorkflowHookURL indicates an expected call of GenerateProjectWorkflowHookURL.
func (mr *MockPreWorkflowHookURLGeneratorMockRecorder) GenerateProjectWorkflowHookURL(hookID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateProjectWorkflowHookURL", reflect.TypeOf((*MockPreWorkflowHookURLGenerator)(nil).GenerateProjectWorkflowHookURL), hookID)
}
