// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: CommandRunner)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_command_runner.go -package=mocks github.com/runatlantis/atlantis/server/events CommandRunner
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	events "github.com/runatlantis/atlantis/server/events"
	models "github.com/runatlantis/atlantis/server/events/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCommandRunner is a mock of CommandRunner interface.
type MockCommandRunner struct {
	ctrl     *gomock.Controller
	recorder *MockCommandRunnerMockRecorder
	isgomock struct{}
}

// MockCommandRunnerMockRecorder is the mock recorder for MockCommandRunner.
type MockCommandRunnerMockRecorder struct {
	mock *MockCommandRunner
}

// NewMockCommandRunner creates a new mock instance.
func NewMockCommandRunner(ctrl *gomock.Controller) *MockCommandRunner {
	mock := &MockCommandRunner{ctrl: ctrl}
	mock.recorder = &MockCommandRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandRunner) EXPECT() *MockCommandRunnerMockRecorder {
	return m.recorder
}

// RunAutoplanCommand mocks base method.
func (m *MockCommandRunner) RunAutoplanCommand(baseRepo, headRepo models.Repo, pull models.PullRequest, user models.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunAutoplanCommand", baseRepo, headRepo, pull, user)
}

// RunAutoplanCommand indicates an expected call of RunAutoplanCommand.
func (mr *MockCommandRunnerMockRecorder) RunAutoplanCommand(baseRepo, headRepo, pull, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAutoplanCommand", reflect.TypeOf((*MockCommandRunner)(nil).RunAutoplanCommand), baseRepo, headRepo, pull, user)
}

// RunCommentCommand mocks base method.
func (m *MockCommandRunner) RunCommentCommand(baseRepo models.Repo, maybeHeadRepo *models.Repo, maybePull *models.PullRequest, user models.User, pullNum int, cmd *events.CommentCommand) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunCommentCommand", baseRepo, maybeHeadRepo, maybePull, user, pullNum, cmd)
}

// RunCommentCommand indicates an expected call of RunCommentCommand.
func (mr *MockCommandRunnerMockRecorder) RunCommentCommand(baseRepo, maybeHeadRepo, maybePull, user, pullNum, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommentCommand", reflect.TypeOf((*MockCommandRunner)(nil).RunCommentCommand), baseRepo, maybeHeadRepo, maybePull, user, pullNum, cmd)
}
