// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: CommandRequirementHandler)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_command_requirement_handler.go -package=mocks . CommandRequirementHandler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	command "github.com/runatlantis/atlantis/server/events/command"
	gomock "go.uber.org/mock/gomock"
)

// MockCommandRequirementHandler is a mock of CommandRequirementHandler interface.
type MockCommandRequirementHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCommandRequirementHandlerMockRecorder
	isgomock struct{}
}

// MockCommandRequirementHandlerMockRecorder is the mock recorder for MockCommandRequirementHandler.
type MockCommandRequirementHandlerMockRecorder struct {
	mock *MockCommandRequirementHandler
}

// NewMockCommandRequirementHandler creates a new mock instance.
func NewMockCommandRequirementHandler(ctrl *gomock.Controller) *MockCommandRequirementHandler {
	mock := &MockCommandRequirementHandler{ctrl: ctrl}
	mock.recorder = &MockCommandRequirementHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandRequirementHandler) EXPECT() *MockCommandRequirementHandlerMockRecorder {
	return m.recorder
}

// ValidateApplyProject mocks base method.
func (m *MockCommandRequirementHandler) ValidateApplyProject(repoDir string, ctx command.ProjectContext) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateApplyProject", repoDir, ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateApplyProject indicates an expected call of ValidateApplyProject.
func (mr *MockCommandRequirementHandlerMockRecorder) ValidateApplyProject(repoDir, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateApplyProject", reflect.TypeOf((*MockCommandRequirementHandler)(nil).ValidateApplyProject), repoDir, ctx)
}

// ValidateImportProject mocks base method.
func (m *MockCommandRequirementHandler) ValidateImportProject(repoDir string, ctx command.ProjectContext) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateImportProject", repoDir, ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateImportProject indicates an expected call of ValidateImportProject.
func (mr *MockCommandRequirementHandlerMockRecorder) ValidateImportProject(repoDir, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateImportProject", reflect.TypeOf((*MockCommandRequirementHandler)(nil).ValidateImportProject), repoDir, ctx)
}

// ValidatePlanProject mocks base method.
func (m *MockCommandRequirementHandler) ValidatePlanProject(repoDir string, ctx command.ProjectContext) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePlanProject", repoDir, ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatePlanProject indicates an expected call of ValidatePlanProject.
func (mr *MockCommandRequirementHandlerMockRecorder) ValidatePlanProject(repoDir, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePlanProject", reflect.TypeOf((*MockCommandRequirementHandler)(nil).ValidatePlanProject), repoDir, ctx)
}

// ValidateProjectDependencies mocks base method.
func (m *MockCommandRequirementHandler) ValidateProjectDependencies(ctx command.ProjectContext) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProjectDependencies", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateProjectDependencies indicates an expected call of ValidateProjectDependencies.
func (mr *MockCommandRequirementHandlerMockRecorder) ValidateProjectDependencies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProjectDependencies", reflect.TypeOf((*MockCommandRequirementHandler)(nil).ValidateProjectDependencies), ctx)
}
