// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: WorkingDir)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_working_dir.go -package=mocks github.com/runatlantis/atlantis/server/events WorkingDir
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/runatlantis/atlantis/server/events/models"
	logging "github.com/runatlantis/atlantis/server/logging"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkingDir is a mock of WorkingDir interface.
type MockWorkingDir struct {
	ctrl     *gomock.Controller
	recorder *MockWorkingDirMockRecorder
	isgomock struct{}
}

// MockWorkingDirMockRecorder is the mock recorder for MockWorkingDir.
type MockWorkingDirMockRecorder struct {
	mock *MockWorkingDir
}

// NewMockWorkingDir creates a new mock instance.
func NewMockWorkingDir(ctrl *gomock.Controller) *MockWorkingDir {
	mock := &MockWorkingDir{ctrl: ctrl}
	mock.recorder = &MockWorkingDirMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkingDir) EXPECT() *MockWorkingDirMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockWorkingDir) Clone(logger logging.SimpleLogging, headRepo models.Repo, p models.PullRequest, workspace string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", logger, headRepo, p, workspace)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockWorkingDirMockRecorder) Clone(logger, headRepo, p, workspace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockWorkingDir)(nil).Clone), logger, headRepo, p, workspace)
}

// Delete mocks base method.
func (m *MockWorkingDir) Delete(logger logging.SimpleLogging, r models.Repo, p models.PullRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", logger, r, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWorkingDirMockRecorder) Delete(logger, r, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWorkingDir)(nil).Delete), logger, r, p)
}

// DeleteForWorkspace mocks base method.
func (m *MockWorkingDir) DeleteForWorkspace(logger logging.SimpleLogging, r models.Repo, p models.PullRequest, workspace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForWorkspace", logger, r, p, workspace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForWorkspace indicates an expected call of DeleteForWorkspace.
func (mr *MockWorkingDirMockRecorder) DeleteForWorkspace(logger, r, p, workspace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForWorkspace", reflect.TypeOf((*MockWorkingDir)(nil).DeleteForWorkspace), logger, r, p, workspace)
}

// DeletePlan mocks base method.
func (m *MockWorkingDir) DeletePlan(logger logging.SimpleLogging, r models.Repo, p models.PullRequest, workspace, path, projectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlan", logger, r, p, workspace, path, projectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlan indicates an expected call of DeletePlan.
func (mr *MockWorkingDirMockRecorder) DeletePlan(logger, r, p, workspace, path, projectName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlan", reflect.TypeOf((*MockWorkingDir)(nil).DeletePlan), logger, r, p, workspace, path, projectName)
}

// GetGitUntrackedFiles mocks base method.
func (m *MockWorkingDir) GetGitUntrackedFiles(logger logging.SimpleLogging, r models.Repo, p models.PullRequest, workspace string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitUntrackedFiles", logger, r, p, workspace)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitUntrackedFiles indicates an expected call of GetGitUntrackedFiles.
func (mr *MockWorkingDirMockRecorder) GetGitUntrackedFiles(logger, r, p, workspace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitUntrackedFiles", reflect.TypeOf((*MockWorkingDir)(nil).GetGitUntrackedFiles), logger, r, p, workspace)
}

// GetPullDir mocks base method.
func (m *MockWorkingDir) GetPullDir(r models.Repo, p models.PullRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullDir", r, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullDir indicates an expected call of GetPullDir.
func (mr *MockWorkingDirMockRecorder) GetPullDir(r, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullDir", reflect.TypeOf((*MockWorkingDir)(nil).GetPullDir), r, p)
}

// GetWorkingDir mocks base method.
func (m *MockWorkingDir) GetWorkingDir(r models.Repo, p models.PullRequest, workspace string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkingDir", r, p, workspace)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkingDir indicates an expected call of GetWorkingDir.
func (mr *MockWorkingDirMockRecorder) GetWorkingDir(r, p, workspace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkingDir", reflect.TypeOf((*MockWorkingDir)(nil).GetWorkingDir), r, p, workspace)
}

// HasDiverged mocks base method.
func (m *MockWorkingDir) HasDiverged(logger logging.SimpleLogging, cloneDir string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasDiverged", logger, cloneDir)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasDiverged indicates an expected call of HasDiverged.
func (mr *MockWorkingDirMockRecorder) HasDiverged(logger, cloneDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasDiverged", reflect.TypeOf((*MockWorkingDir)(nil).HasDiverged), logger, cloneDir)
}

// MergeAgain mocks base method.
func (m *MockWorkingDir) MergeAgain(logger logging.SimpleLogging, headRepo models.Repo, p models.PullRequest, workspace string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeAgain", logger, headRepo, p, workspace)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MergeAgain indicates an expected call of MergeAgain.
func (mr *MockWorkingDirMockRecorder) MergeAgain(logger, headRepo, p, workspace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeAgain", reflect.TypeOf((*MockWorkingDir)(nil).MergeAgain), logger, headRepo, p, workspace)
}
