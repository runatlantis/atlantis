// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: CommitStatusUpdater)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_commit_status_updater.go -package=mocks github.com/runatlantis/atlantis/server/events CommitStatusUpdater
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	command "github.com/runatlantis/atlantis/server/events/command"
	models "github.com/runatlantis/atlantis/server/events/models"
	logging "github.com/runatlantis/atlantis/server/logging"
	gomock "go.uber.org/mock/gomock"
)

// MockCommitStatusUpdater is a mock of CommitStatusUpdater interface.
type MockCommitStatusUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockCommitStatusUpdaterMockRecorder
	isgomock struct{}
}

// MockCommitStatusUpdaterMockRecorder is the mock recorder for MockCommitStatusUpdater.
type MockCommitStatusUpdaterMockRecorder struct {
	mock *MockCommitStatusUpdater
}

// NewMockCommitStatusUpdater creates a new mock instance.
func NewMockCommitStatusUpdater(ctrl *gomock.Controller) *MockCommitStatusUpdater {
	mock := &MockCommitStatusUpdater{ctrl: ctrl}
	mock.recorder = &MockCommitStatusUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitStatusUpdater) EXPECT() *MockCommitStatusUpdaterMockRecorder {
	return m.recorder
}

// UpdateCombined mocks base method.
func (m *MockCommitStatusUpdater) UpdateCombined(logger logging.SimpleLogging, repo models.Repo, pull models.PullRequest, status models.CommitStatus, cmdName command.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCombined", logger, repo, pull, status, cmdName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCombined indicates an expected call of UpdateCombined.
func (mr *MockCommitStatusUpdaterMockRecorder) UpdateCombined(logger, repo, pull, status, cmdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCombined", reflect.TypeOf((*MockCommitStatusUpdater)(nil).UpdateCombined), logger, repo, pull, status, cmdName)
}

// UpdateCombinedCount mocks base method.
func (m *MockCommitStatusUpdater) UpdateCombinedCount(logger logging.SimpleLogging, repo models.Repo, pull models.PullRequest, status models.CommitStatus, cmdName command.Name, numSuccess, numTotal int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCombinedCount", logger, repo, pull, status, cmdName, numSuccess, numTotal)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCombinedCount indicates an expected call of UpdateCombinedCount.
func (mr *MockCommitStatusUpdaterMockRecorder) UpdateCombinedCount(logger, repo, pull, status, cmdName, numSuccess, numTotal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCombinedCount", reflect.TypeOf((*MockCommitStatusUpdater)(nil).UpdateCombinedCount), logger, repo, pull, status, cmdName, numSuccess, numTotal)
}

// UpdatePostWorkflowHook mocks base method.
func (m *MockCommitStatusUpdater) UpdatePostWorkflowHook(logger logging.SimpleLogging, pull models.PullRequest, status models.CommitStatus, hookDescription, runtimeDescription, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePostWorkflowHook", logger, pull, status, hookDescription, runtimeDescription, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePostWorkflowHook indicates an expected call of UpdatePostWorkflowHook.
func (mr *MockCommitStatusUpdaterMockRecorder) UpdatePostWorkflowHook(logger, pull, status, hookDescription, runtimeDescription, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePostWorkflowHook", reflect.TypeOf((*MockCommitStatusUpdater)(nil).UpdatePostWorkflowHook), logger, pull, status, hookDescription, runtimeDescription, url)
}

// UpdatePreWorkflowHook mocks base method.
func (m *MockCommitStatusUpdater) UpdatePreWorkflowHook(logger logging.SimpleLogging, pull models.PullRequest, status models.CommitStatus, hookDescription, runtimeDescription, url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreWorkflowHook", logger, pull, status, hookDescription, runtimeDescription, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePreWorkflowHook indicates an expected call of UpdatePreWorkflowHook.
func (mr *MockCommitStatusUpdaterMockRecorder) UpdatePreWorkflowHook(logger, pull, status, hookDescription, runtimeDescription, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreWorkflowHook", reflect.TypeOf((*MockCommitStatusUpdater)(nil).UpdatePreWorkflowHook), logger, pull, status, hookDescription, runtimeDescription, url)
}
