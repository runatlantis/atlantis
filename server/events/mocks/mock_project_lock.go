// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: ProjectLocker)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_project_lock.go -package=mocks . ProjectLocker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	events "github.com/runatlantis/atlantis/server/events"
	models "github.com/runatlantis/atlantis/server/events/models"
	logging "github.com/runatlantis/atlantis/server/logging"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectLocker is a mock of ProjectLocker interface.
type MockProjectLocker struct {
	ctrl     *gomock.Controller
	recorder *MockProjectLockerMockRecorder
	isgomock struct{}
}

// MockProjectLockerMockRecorder is the mock recorder for MockProjectLocker.
type MockProjectLockerMockRecorder struct {
	mock *MockProjectLocker
}

// NewMockProjectLocker creates a new mock instance.
func NewMockProjectLocker(ctrl *gomock.Controller) *MockProjectLocker {
	mock := &MockProjectLocker{ctrl: ctrl}
	mock.recorder = &MockProjectLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectLocker) EXPECT() *MockProjectLockerMockRecorder {
	return m.recorder
}

// TryLock mocks base method.
func (m *MockProjectLocker) TryLock(log logging.SimpleLogging, pull models.PullRequest, user models.User, workspace string, project models.Project, repoLocking bool) (*events.TryLockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLock", log, pull, user, workspace, project, repoLocking)
	ret0, _ := ret[0].(*events.TryLockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryLock indicates an expected call of TryLock.
func (mr *MockProjectLockerMockRecorder) TryLock(log, pull, user, workspace, project, repoLocking any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockProjectLocker)(nil).TryLock), log, pull, user, workspace, project, repoLocking)
}
