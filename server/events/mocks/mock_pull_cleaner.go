// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: PullCleaner)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_pull_cleaner.go -package=mocks github.com/runatlantis/atlantis/server/events PullCleaner
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/runatlantis/atlantis/server/events/models"
	logging "github.com/runatlantis/atlantis/server/logging"
	gomock "go.uber.org/mock/gomock"
)

// MockPullCleaner is a mock of PullCleaner interface.
type MockPullCleaner struct {
	ctrl     *gomock.Controller
	recorder *MockPullCleanerMockRecorder
	isgomock struct{}
}

// MockPullCleanerMockRecorder is the mock recorder for MockPullCleaner.
type MockPullCleanerMockRecorder struct {
	mock *MockPullCleaner
}

// NewMockPullCleaner creates a new mock instance.
func NewMockPullCleaner(ctrl *gomock.Controller) *MockPullCleaner {
	mock := &MockPullCleaner{ctrl: ctrl}
	mock.recorder = &MockPullCleanerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullCleaner) EXPECT() *MockPullCleanerMockRecorder {
	return m.recorder
}

// CleanUpPull mocks base method.
func (m *MockPullCleaner) CleanUpPull(logger logging.SimpleLogging, repo models.Repo, pull models.PullRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanUpPull", logger, repo, pull)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanUpPull indicates an expected call of CleanUpPull.
func (mr *MockPullCleanerMockRecorder) CleanUpPull(logger, repo, pull any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpPull", reflect.TypeOf((*MockPullCleaner)(nil).CleanUpPull), logger, repo, pull)
}
