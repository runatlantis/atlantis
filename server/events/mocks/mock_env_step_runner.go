// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: EnvStepRunner)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_env_step_runner.go -package=mocks . EnvStepRunner
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	valid "github.com/runatlantis/atlantis/server/core/config/valid"
	command "github.com/runatlantis/atlantis/server/events/command"
	gomock "go.uber.org/mock/gomock"
)

// MockEnvStepRunner is a mock of EnvStepRunner interface.
type MockEnvStepRunner struct {
	ctrl     *gomock.Controller
	recorder *MockEnvStepRunnerMockRecorder
	isgomock struct{}
}

// MockEnvStepRunnerMockRecorder is the mock recorder for MockEnvStepRunner.
type MockEnvStepRunnerMockRecorder struct {
	mock *MockEnvStepRunner
}

// NewMockEnvStepRunner creates a new mock instance.
func NewMockEnvStepRunner(ctrl *gomock.Controller) *MockEnvStepRunner {
	mock := &MockEnvStepRunner{ctrl: ctrl}
	mock.recorder = &MockEnvStepRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvStepRunner) EXPECT() *MockEnvStepRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockEnvStepRunner) Run(ctx command.ProjectContext, shell *valid.CommandShell, cmd, value, path string, envs map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, shell, cmd, value, path, envs)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockEnvStepRunnerMockRecorder) Run(ctx, shell, cmd, value, path, envs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockEnvStepRunner)(nil).Run), ctx, shell, cmd, value, path, envs)
}
