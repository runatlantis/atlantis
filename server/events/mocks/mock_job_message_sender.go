// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events (interfaces: JobMessageSender)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_job_message_sender.go -package=mocks . JobMessageSender
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	command "github.com/runatlantis/atlantis/server/events/command"
	gomock "go.uber.org/mock/gomock"
)

// MockJobMessageSender is a mock of JobMessageSender interface.
type MockJobMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockJobMessageSenderMockRecorder
	isgomock struct{}
}

// MockJobMessageSenderMockRecorder is the mock recorder for MockJobMessageSender.
type MockJobMessageSenderMockRecorder struct {
	mock *MockJobMessageSender
}

// NewMockJobMessageSender creates a new mock instance.
func NewMockJobMessageSender(ctrl *gomock.Controller) *MockJobMessageSender {
	mock := &MockJobMessageSender{ctrl: ctrl}
	mock.recorder = &MockJobMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobMessageSender) EXPECT() *MockJobMessageSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockJobMessageSender) Send(ctx command.ProjectContext, msg string, operationComplete bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", ctx, msg, operationComplete)
}

// Send indicates an expected call of Send.
func (mr *MockJobMessageSenderMockRecorder) Send(ctx, msg, operationComplete any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockJobMessageSender)(nil).Send), ctx, msg, operationComplete)
}
