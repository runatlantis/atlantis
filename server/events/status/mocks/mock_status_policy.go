// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events/status (interfaces: StatusPolicy)

package mocks

import (
	pegomock "github.com/petergtz/pegomock/v4"
	command "github.com/runatlantis/atlantis/server/events/command"
	status "github.com/runatlantis/atlantis/server/events/status"
	"reflect"
	"time"
)

type MockStatusPolicy struct {
	fail func(message string, callerSkip ...int)
}

func NewMockStatusPolicy(options ...pegomock.Option) *MockStatusPolicy {
	mock := &MockStatusPolicy{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockStatusPolicy) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockStatusPolicy) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockStatusPolicy) DecideOnEnd(ctx *command.Context, cmdName command.Name, result *command.Result) status.StatusDecision {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusPolicy().")
	}
	_params := []pegomock.Param{ctx, cmdName, result}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("DecideOnEnd", _params, []reflect.Type{reflect.TypeOf((*status.StatusDecision)(nil)).Elem()})
	var _ret0 status.StatusDecision
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(status.StatusDecision)
		}
	}
	return _ret0
}

func (mock *MockStatusPolicy) DecideOnNoProjects(ctx *command.Context, cmdName command.Name) status.StatusDecision {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusPolicy().")
	}
	_params := []pegomock.Param{ctx, cmdName}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("DecideOnNoProjects", _params, []reflect.Type{reflect.TypeOf((*status.StatusDecision)(nil)).Elem()})
	var _ret0 status.StatusDecision
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(status.StatusDecision)
		}
	}
	return _ret0
}

func (mock *MockStatusPolicy) DecideOnStart(ctx *command.Context, cmdName command.Name) status.StatusDecision {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusPolicy().")
	}
	_params := []pegomock.Param{ctx, cmdName}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("DecideOnStart", _params, []reflect.Type{reflect.TypeOf((*status.StatusDecision)(nil)).Elem()})
	var _ret0 status.StatusDecision
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(status.StatusDecision)
		}
	}
	return _ret0
}

func (mock *MockStatusPolicy) VerifyWasCalledOnce() *VerifierMockStatusPolicy {
	return &VerifierMockStatusPolicy{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockStatusPolicy) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockStatusPolicy {
	return &VerifierMockStatusPolicy{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockStatusPolicy) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockStatusPolicy {
	return &VerifierMockStatusPolicy{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockStatusPolicy) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockStatusPolicy {
	return &VerifierMockStatusPolicy{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockStatusPolicy struct {
	mock                   *MockStatusPolicy
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockStatusPolicy) DecideOnEnd(ctx *command.Context, cmdName command.Name, result *command.Result) *MockStatusPolicy_DecideOnEnd_OngoingVerification {
	_params := []pegomock.Param{ctx, cmdName, result}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DecideOnEnd", _params, verifier.timeout)
	return &MockStatusPolicy_DecideOnEnd_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusPolicy_DecideOnEnd_OngoingVerification struct {
	mock              *MockStatusPolicy
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusPolicy_DecideOnEnd_OngoingVerification) GetCapturedArguments() (*command.Context, command.Name, *command.Result) {
	ctx, cmdName, result := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], cmdName[len(cmdName)-1], result[len(result)-1]
}

func (c *MockStatusPolicy_DecideOnEnd_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context, _param1 []command.Name, _param2 []*command.Result) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(command.Name)
			}
		}
		if len(_params) > 2 {
			_param2 = make([]*command.Result, len(c.methodInvocations))
			for u, param := range _params[2] {
				_param2[u] = param.(*command.Result)
			}
		}
	}
	return
}

func (verifier *VerifierMockStatusPolicy) DecideOnNoProjects(ctx *command.Context, cmdName command.Name) *MockStatusPolicy_DecideOnNoProjects_OngoingVerification {
	_params := []pegomock.Param{ctx, cmdName}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DecideOnNoProjects", _params, verifier.timeout)
	return &MockStatusPolicy_DecideOnNoProjects_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusPolicy_DecideOnNoProjects_OngoingVerification struct {
	mock              *MockStatusPolicy
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusPolicy_DecideOnNoProjects_OngoingVerification) GetCapturedArguments() (*command.Context, command.Name) {
	ctx, cmdName := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], cmdName[len(cmdName)-1]
}

func (c *MockStatusPolicy_DecideOnNoProjects_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context, _param1 []command.Name) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(command.Name)
			}
		}
	}
	return
}

func (verifier *VerifierMockStatusPolicy) DecideOnStart(ctx *command.Context, cmdName command.Name) *MockStatusPolicy_DecideOnStart_OngoingVerification {
	_params := []pegomock.Param{ctx, cmdName}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DecideOnStart", _params, verifier.timeout)
	return &MockStatusPolicy_DecideOnStart_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusPolicy_DecideOnStart_OngoingVerification struct {
	mock              *MockStatusPolicy
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusPolicy_DecideOnStart_OngoingVerification) GetCapturedArguments() (*command.Context, command.Name) {
	ctx, cmdName := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], cmdName[len(cmdName)-1]
}

func (c *MockStatusPolicy_DecideOnStart_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context, _param1 []command.Name) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(command.Name)
			}
		}
	}
	return
}
