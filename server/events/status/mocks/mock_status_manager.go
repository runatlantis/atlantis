// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events/status (interfaces: StatusManager)

package mocks

import (
	pegomock "github.com/petergtz/pegomock/v4"
	command "github.com/runatlantis/atlantis/server/events/command"
	models "github.com/runatlantis/atlantis/server/events/models"
	status "github.com/runatlantis/atlantis/server/events/status"
	"reflect"
	"time"
)

type MockStatusManager struct {
	fail func(message string, callerSkip ...int)
}

func NewMockStatusManager(options ...pegomock.Option) *MockStatusManager {
	mock := &MockStatusManager{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockStatusManager) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockStatusManager) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockStatusManager) ClearAllStatuses(ctx *command.Context) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusManager().")
	}
	_params := []pegomock.Param{ctx}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("ClearAllStatuses", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockStatusManager) ClearStatusForCommand(ctx *command.Context, cmdName command.Name) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusManager().")
	}
	_params := []pegomock.Param{ctx, cmdName}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("ClearStatusForCommand", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockStatusManager) GetCurrentStatus(repo models.Repo, pull models.PullRequest) (*status.StatusState, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusManager().")
	}
	_params := []pegomock.Param{repo, pull}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("GetCurrentStatus", _params, []reflect.Type{reflect.TypeOf((**status.StatusState)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *status.StatusState
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*status.StatusState)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockStatusManager) HandleCommandEnd(ctx *command.Context, cmdName command.Name, result *command.Result) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusManager().")
	}
	_params := []pegomock.Param{ctx, cmdName, result}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("HandleCommandEnd", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockStatusManager) HandleCommandStart(ctx *command.Context, cmdName command.Name) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusManager().")
	}
	_params := []pegomock.Param{ctx, cmdName}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("HandleCommandStart", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockStatusManager) HandleNoProjectsFound(ctx *command.Context, cmdName command.Name) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusManager().")
	}
	_params := []pegomock.Param{ctx, cmdName}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("HandleNoProjectsFound", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockStatusManager) SetFailure(ctx *command.Context, cmdName command.Name, err error) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusManager().")
	}
	_params := []pegomock.Param{ctx, cmdName, err}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("SetFailure", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockStatusManager) SetPending(ctx *command.Context, cmdName command.Name) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusManager().")
	}
	_params := []pegomock.Param{ctx, cmdName}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("SetPending", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockStatusManager) SetSuccess(ctx *command.Context, cmdName command.Name, numSuccess int, numTotal int) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusManager().")
	}
	_params := []pegomock.Param{ctx, cmdName, numSuccess, numTotal}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("SetSuccess", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockStatusManager) VerifyWasCalledOnce() *VerifierMockStatusManager {
	return &VerifierMockStatusManager{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockStatusManager) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockStatusManager {
	return &VerifierMockStatusManager{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockStatusManager) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockStatusManager {
	return &VerifierMockStatusManager{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockStatusManager) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockStatusManager {
	return &VerifierMockStatusManager{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockStatusManager struct {
	mock                   *MockStatusManager
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockStatusManager) ClearAllStatuses(ctx *command.Context) *MockStatusManager_ClearAllStatuses_OngoingVerification {
	_params := []pegomock.Param{ctx}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ClearAllStatuses", _params, verifier.timeout)
	return &MockStatusManager_ClearAllStatuses_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusManager_ClearAllStatuses_OngoingVerification struct {
	mock              *MockStatusManager
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusManager_ClearAllStatuses_OngoingVerification) GetCapturedArguments() *command.Context {
	ctx := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1]
}

func (c *MockStatusManager_ClearAllStatuses_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
	}
	return
}

func (verifier *VerifierMockStatusManager) ClearStatusForCommand(ctx *command.Context, cmdName command.Name) *MockStatusManager_ClearStatusForCommand_OngoingVerification {
	_params := []pegomock.Param{ctx, cmdName}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ClearStatusForCommand", _params, verifier.timeout)
	return &MockStatusManager_ClearStatusForCommand_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusManager_ClearStatusForCommand_OngoingVerification struct {
	mock              *MockStatusManager
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusManager_ClearStatusForCommand_OngoingVerification) GetCapturedArguments() (*command.Context, command.Name) {
	ctx, cmdName := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], cmdName[len(cmdName)-1]
}

func (c *MockStatusManager_ClearStatusForCommand_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context, _param1 []command.Name) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(command.Name)
			}
		}
	}
	return
}

func (verifier *VerifierMockStatusManager) GetCurrentStatus(repo models.Repo, pull models.PullRequest) *MockStatusManager_GetCurrentStatus_OngoingVerification {
	_params := []pegomock.Param{repo, pull}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetCurrentStatus", _params, verifier.timeout)
	return &MockStatusManager_GetCurrentStatus_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusManager_GetCurrentStatus_OngoingVerification struct {
	mock              *MockStatusManager
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusManager_GetCurrentStatus_OngoingVerification) GetCapturedArguments() (models.Repo, models.PullRequest) {
	repo, pull := c.GetAllCapturedArguments()
	return repo[len(repo)-1], pull[len(pull)-1]
}

func (c *MockStatusManager_GetCurrentStatus_OngoingVerification) GetAllCapturedArguments() (_param0 []models.Repo, _param1 []models.PullRequest) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]models.Repo, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(models.Repo)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]models.PullRequest, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(models.PullRequest)
			}
		}
	}
	return
}

func (verifier *VerifierMockStatusManager) HandleCommandEnd(ctx *command.Context, cmdName command.Name, result *command.Result) *MockStatusManager_HandleCommandEnd_OngoingVerification {
	_params := []pegomock.Param{ctx, cmdName, result}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "HandleCommandEnd", _params, verifier.timeout)
	return &MockStatusManager_HandleCommandEnd_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusManager_HandleCommandEnd_OngoingVerification struct {
	mock              *MockStatusManager
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusManager_HandleCommandEnd_OngoingVerification) GetCapturedArguments() (*command.Context, command.Name, *command.Result) {
	ctx, cmdName, result := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], cmdName[len(cmdName)-1], result[len(result)-1]
}

func (c *MockStatusManager_HandleCommandEnd_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context, _param1 []command.Name, _param2 []*command.Result) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(command.Name)
			}
		}
		if len(_params) > 2 {
			_param2 = make([]*command.Result, len(c.methodInvocations))
			for u, param := range _params[2] {
				_param2[u] = param.(*command.Result)
			}
		}
	}
	return
}

func (verifier *VerifierMockStatusManager) HandleCommandStart(ctx *command.Context, cmdName command.Name) *MockStatusManager_HandleCommandStart_OngoingVerification {
	_params := []pegomock.Param{ctx, cmdName}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "HandleCommandStart", _params, verifier.timeout)
	return &MockStatusManager_HandleCommandStart_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusManager_HandleCommandStart_OngoingVerification struct {
	mock              *MockStatusManager
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusManager_HandleCommandStart_OngoingVerification) GetCapturedArguments() (*command.Context, command.Name) {
	ctx, cmdName := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], cmdName[len(cmdName)-1]
}

func (c *MockStatusManager_HandleCommandStart_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context, _param1 []command.Name) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(command.Name)
			}
		}
	}
	return
}

func (verifier *VerifierMockStatusManager) HandleNoProjectsFound(ctx *command.Context, cmdName command.Name) *MockStatusManager_HandleNoProjectsFound_OngoingVerification {
	_params := []pegomock.Param{ctx, cmdName}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "HandleNoProjectsFound", _params, verifier.timeout)
	return &MockStatusManager_HandleNoProjectsFound_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusManager_HandleNoProjectsFound_OngoingVerification struct {
	mock              *MockStatusManager
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusManager_HandleNoProjectsFound_OngoingVerification) GetCapturedArguments() (*command.Context, command.Name) {
	ctx, cmdName := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], cmdName[len(cmdName)-1]
}

func (c *MockStatusManager_HandleNoProjectsFound_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context, _param1 []command.Name) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(command.Name)
			}
		}
	}
	return
}

func (verifier *VerifierMockStatusManager) SetFailure(ctx *command.Context, cmdName command.Name, err error) *MockStatusManager_SetFailure_OngoingVerification {
	_params := []pegomock.Param{ctx, cmdName, err}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SetFailure", _params, verifier.timeout)
	return &MockStatusManager_SetFailure_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusManager_SetFailure_OngoingVerification struct {
	mock              *MockStatusManager
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusManager_SetFailure_OngoingVerification) GetCapturedArguments() (*command.Context, command.Name, error) {
	ctx, cmdName, err := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], cmdName[len(cmdName)-1], err[len(err)-1]
}

func (c *MockStatusManager_SetFailure_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context, _param1 []command.Name, _param2 []error) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(command.Name)
			}
		}
		if len(_params) > 2 {
			_param2 = make([]error, len(c.methodInvocations))
			for u, param := range _params[2] {
				_param2[u] = param.(error)
			}
		}
	}
	return
}

func (verifier *VerifierMockStatusManager) SetPending(ctx *command.Context, cmdName command.Name) *MockStatusManager_SetPending_OngoingVerification {
	_params := []pegomock.Param{ctx, cmdName}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SetPending", _params, verifier.timeout)
	return &MockStatusManager_SetPending_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusManager_SetPending_OngoingVerification struct {
	mock              *MockStatusManager
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusManager_SetPending_OngoingVerification) GetCapturedArguments() (*command.Context, command.Name) {
	ctx, cmdName := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], cmdName[len(cmdName)-1]
}

func (c *MockStatusManager_SetPending_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context, _param1 []command.Name) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(command.Name)
			}
		}
	}
	return
}

func (verifier *VerifierMockStatusManager) SetSuccess(ctx *command.Context, cmdName command.Name, numSuccess int, numTotal int) *MockStatusManager_SetSuccess_OngoingVerification {
	_params := []pegomock.Param{ctx, cmdName, numSuccess, numTotal}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SetSuccess", _params, verifier.timeout)
	return &MockStatusManager_SetSuccess_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusManager_SetSuccess_OngoingVerification struct {
	mock              *MockStatusManager
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusManager_SetSuccess_OngoingVerification) GetCapturedArguments() (*command.Context, command.Name, int, int) {
	ctx, cmdName, numSuccess, numTotal := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], cmdName[len(cmdName)-1], numSuccess[len(numSuccess)-1], numTotal[len(numTotal)-1]
}

func (c *MockStatusManager_SetSuccess_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context, _param1 []command.Name, _param2 []int, _param3 []int) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(command.Name)
			}
		}
		if len(_params) > 2 {
			_param2 = make([]int, len(c.methodInvocations))
			for u, param := range _params[2] {
				_param2[u] = param.(int)
			}
		}
		if len(_params) > 3 {
			_param3 = make([]int, len(c.methodInvocations))
			for u, param := range _params[3] {
				_param3[u] = param.(int)
			}
		}
	}
	return
}
