// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/events/status (interfaces: StatusCleaner)

package mocks

import (
	pegomock "github.com/petergtz/pegomock/v4"
	command "github.com/runatlantis/atlantis/server/events/command"
	"reflect"
	"time"
)

type MockStatusCleaner struct {
	fail func(message string, callerSkip ...int)
}

func NewMockStatusCleaner(options ...pegomock.Option) *MockStatusCleaner {
	mock := &MockStatusCleaner{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockStatusCleaner) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockStatusCleaner) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockStatusCleaner) ClearAllStatuses(ctx *command.Context) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusCleaner().")
	}
	_params := []pegomock.Param{ctx}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("ClearAllStatuses", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockStatusCleaner) ClearPendingStatuses(ctx *command.Context, commands []command.Name) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusCleaner().")
	}
	_params := []pegomock.Param{ctx, commands}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("ClearPendingStatuses", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockStatusCleaner) ClearStatusForCommand(ctx *command.Context, cmdName command.Name) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusCleaner().")
	}
	_params := []pegomock.Param{ctx, cmdName}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("ClearStatusForCommand", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockStatusCleaner) ResetStatusesToSuccess(ctx *command.Context) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStatusCleaner().")
	}
	_params := []pegomock.Param{ctx}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("ResetStatusesToSuccess", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockStatusCleaner) VerifyWasCalledOnce() *VerifierMockStatusCleaner {
	return &VerifierMockStatusCleaner{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockStatusCleaner) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockStatusCleaner {
	return &VerifierMockStatusCleaner{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockStatusCleaner) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockStatusCleaner {
	return &VerifierMockStatusCleaner{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockStatusCleaner) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockStatusCleaner {
	return &VerifierMockStatusCleaner{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockStatusCleaner struct {
	mock                   *MockStatusCleaner
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockStatusCleaner) ClearAllStatuses(ctx *command.Context) *MockStatusCleaner_ClearAllStatuses_OngoingVerification {
	_params := []pegomock.Param{ctx}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ClearAllStatuses", _params, verifier.timeout)
	return &MockStatusCleaner_ClearAllStatuses_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusCleaner_ClearAllStatuses_OngoingVerification struct {
	mock              *MockStatusCleaner
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusCleaner_ClearAllStatuses_OngoingVerification) GetCapturedArguments() *command.Context {
	ctx := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1]
}

func (c *MockStatusCleaner_ClearAllStatuses_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
	}
	return
}

func (verifier *VerifierMockStatusCleaner) ClearPendingStatuses(ctx *command.Context, commands []command.Name) *MockStatusCleaner_ClearPendingStatuses_OngoingVerification {
	_params := []pegomock.Param{ctx, commands}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ClearPendingStatuses", _params, verifier.timeout)
	return &MockStatusCleaner_ClearPendingStatuses_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusCleaner_ClearPendingStatuses_OngoingVerification struct {
	mock              *MockStatusCleaner
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusCleaner_ClearPendingStatuses_OngoingVerification) GetCapturedArguments() (*command.Context, []command.Name) {
	ctx, commands := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], commands[len(commands)-1]
}

func (c *MockStatusCleaner_ClearPendingStatuses_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context, _param1 [][]command.Name) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([][]command.Name, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.([]command.Name)
			}
		}
	}
	return
}

func (verifier *VerifierMockStatusCleaner) ClearStatusForCommand(ctx *command.Context, cmdName command.Name) *MockStatusCleaner_ClearStatusForCommand_OngoingVerification {
	_params := []pegomock.Param{ctx, cmdName}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ClearStatusForCommand", _params, verifier.timeout)
	return &MockStatusCleaner_ClearStatusForCommand_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusCleaner_ClearStatusForCommand_OngoingVerification struct {
	mock              *MockStatusCleaner
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusCleaner_ClearStatusForCommand_OngoingVerification) GetCapturedArguments() (*command.Context, command.Name) {
	ctx, cmdName := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1], cmdName[len(cmdName)-1]
}

func (c *MockStatusCleaner_ClearStatusForCommand_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context, _param1 []command.Name) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(command.Name)
			}
		}
	}
	return
}

func (verifier *VerifierMockStatusCleaner) ResetStatusesToSuccess(ctx *command.Context) *MockStatusCleaner_ResetStatusesToSuccess_OngoingVerification {
	_params := []pegomock.Param{ctx}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ResetStatusesToSuccess", _params, verifier.timeout)
	return &MockStatusCleaner_ResetStatusesToSuccess_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStatusCleaner_ResetStatusesToSuccess_OngoingVerification struct {
	mock              *MockStatusCleaner
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStatusCleaner_ResetStatusesToSuccess_OngoingVerification) GetCapturedArguments() *command.Context {
	ctx := c.GetAllCapturedArguments()
	return ctx[len(ctx)-1]
}

func (c *MockStatusCleaner_ResetStatusesToSuccess_OngoingVerification) GetAllCapturedArguments() (_param0 []*command.Context) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]*command.Context, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(*command.Context)
			}
		}
	}
	return
}
