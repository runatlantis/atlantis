// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/terraform/tfclient (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_terraform_client.go -package=mocks . Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	version "github.com/hashicorp/go-version"
	terraform "github.com/runatlantis/atlantis/server/core/terraform"
	command "github.com/runatlantis/atlantis/server/events/command"
	logging "github.com/runatlantis/atlantis/server/logging"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DetectVersion mocks base method.
func (m *MockClient) DetectVersion(log logging.SimpleLogging, projectDirectory string) *version.Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectVersion", log, projectDirectory)
	ret0, _ := ret[0].(*version.Version)
	return ret0
}

// DetectVersion indicates an expected call of DetectVersion.
func (mr *MockClientMockRecorder) DetectVersion(log, projectDirectory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectVersion", reflect.TypeOf((*MockClient)(nil).DetectVersion), log, projectDirectory)
}

// EnsureVersion mocks base method.
func (m *MockClient) EnsureVersion(log logging.SimpleLogging, d terraform.Distribution, v *version.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureVersion", log, d, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureVersion indicates an expected call of EnsureVersion.
func (mr *MockClientMockRecorder) EnsureVersion(log, d, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureVersion", reflect.TypeOf((*MockClient)(nil).EnsureVersion), log, d, v)
}

// RunCommandWithVersion mocks base method.
func (m *MockClient) RunCommandWithVersion(ctx command.ProjectContext, path string, args []string, envs map[string]string, d terraform.Distribution, v *version.Version, workspace string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommandWithVersion", ctx, path, args, envs, d, v, workspace)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommandWithVersion indicates an expected call of RunCommandWithVersion.
func (mr *MockClientMockRecorder) RunCommandWithVersion(ctx, path, args, envs, d, v, workspace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommandWithVersion", reflect.TypeOf((*MockClient)(nil).RunCommandWithVersion), ctx, path, args, envs, d, v, workspace)
}
