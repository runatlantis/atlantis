// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/db (interfaces: Database)

package mocks

import (
	pegomock "github.com/petergtz/pegomock/v4"
	command "github.com/runatlantis/atlantis/server/events/command"
	models "github.com/runatlantis/atlantis/server/events/models"
	"reflect"
	"time"
)

type MockDatabase struct {
	fail func(message string, callerSkip ...int)
}

func NewMockDatabase(options ...pegomock.Option) *MockDatabase {
	mock := &MockDatabase{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockDatabase) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockDatabase) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockDatabase) CheckCommandLock(cmdName command.Name) (*command.Lock, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDatabase().")
	}
	_params := []pegomock.Param{cmdName}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("CheckCommandLock", _params, []reflect.Type{reflect.TypeOf((**command.Lock)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *command.Lock
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*command.Lock)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockDatabase) Close() error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDatabase().")
	}
	_params := []pegomock.Param{}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("Close", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockDatabase) DeletePullStatus(pull models.PullRequest) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDatabase().")
	}
	_params := []pegomock.Param{pull}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("DeletePullStatus", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockDatabase) GetLock(project models.Project, workspace string) (*models.ProjectLock, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDatabase().")
	}
	_params := []pegomock.Param{project, workspace}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("GetLock", _params, []reflect.Type{reflect.TypeOf((**models.ProjectLock)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *models.ProjectLock
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*models.ProjectLock)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockDatabase) GetPullStatus(pull models.PullRequest) (*models.PullStatus, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDatabase().")
	}
	_params := []pegomock.Param{pull}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("GetPullStatus", _params, []reflect.Type{reflect.TypeOf((**models.PullStatus)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *models.PullStatus
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*models.PullStatus)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockDatabase) List() ([]models.ProjectLock, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDatabase().")
	}
	_params := []pegomock.Param{}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("List", _params, []reflect.Type{reflect.TypeOf((*[]models.ProjectLock)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 []models.ProjectLock
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].([]models.ProjectLock)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockDatabase) LockCommand(cmdName command.Name, lockTime time.Time) (*command.Lock, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDatabase().")
	}
	_params := []pegomock.Param{cmdName, lockTime}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("LockCommand", _params, []reflect.Type{reflect.TypeOf((**command.Lock)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *command.Lock
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*command.Lock)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockDatabase) TryLock(lock models.ProjectLock) (bool, models.ProjectLock, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDatabase().")
	}
	_params := []pegomock.Param{lock}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("TryLock", _params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*models.ProjectLock)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 bool
	var _ret1 models.ProjectLock
	var _ret2 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(bool)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(models.ProjectLock)
		}
		if _result[2] != nil {
			_ret2 = _result[2].(error)
		}
	}
	return _ret0, _ret1, _ret2
}

func (mock *MockDatabase) Unlock(project models.Project, workspace string) (*models.ProjectLock, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDatabase().")
	}
	_params := []pegomock.Param{project, workspace}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("Unlock", _params, []reflect.Type{reflect.TypeOf((**models.ProjectLock)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 *models.ProjectLock
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(*models.ProjectLock)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockDatabase) UnlockByPull(repoFullName string, pullNum int) ([]models.ProjectLock, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDatabase().")
	}
	_params := []pegomock.Param{repoFullName, pullNum}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("UnlockByPull", _params, []reflect.Type{reflect.TypeOf((*[]models.ProjectLock)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 []models.ProjectLock
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].([]models.ProjectLock)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockDatabase) UnlockCommand(cmdName command.Name) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDatabase().")
	}
	_params := []pegomock.Param{cmdName}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("UnlockCommand", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockDatabase) UpdateProjectStatus(pull models.PullRequest, workspace string, repoRelDir string, newStatus models.ProjectPlanStatus) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDatabase().")
	}
	_params := []pegomock.Param{pull, workspace, repoRelDir, newStatus}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("UpdateProjectStatus", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockDatabase) UpdatePullWithResults(pull models.PullRequest, newResults []command.ProjectResult) (models.PullStatus, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDatabase().")
	}
	_params := []pegomock.Param{pull, newResults}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("UpdatePullWithResults", _params, []reflect.Type{reflect.TypeOf((*models.PullStatus)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 models.PullStatus
	var _ret1 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(models.PullStatus)
		}
		if _result[1] != nil {
			_ret1 = _result[1].(error)
		}
	}
	return _ret0, _ret1
}

func (mock *MockDatabase) VerifyWasCalledOnce() *VerifierMockDatabase {
	return &VerifierMockDatabase{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockDatabase) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockDatabase {
	return &VerifierMockDatabase{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockDatabase) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockDatabase {
	return &VerifierMockDatabase{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockDatabase) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockDatabase {
	return &VerifierMockDatabase{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockDatabase struct {
	mock                   *MockDatabase
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockDatabase) CheckCommandLock(cmdName command.Name) *MockDatabase_CheckCommandLock_OngoingVerification {
	_params := []pegomock.Param{cmdName}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CheckCommandLock", _params, verifier.timeout)
	return &MockDatabase_CheckCommandLock_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDatabase_CheckCommandLock_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDatabase_CheckCommandLock_OngoingVerification) GetCapturedArguments() command.Name {
	cmdName := c.GetAllCapturedArguments()
	return cmdName[len(cmdName)-1]
}

func (c *MockDatabase_CheckCommandLock_OngoingVerification) GetAllCapturedArguments() (_param0 []command.Name) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(command.Name)
			}
		}
	}
	return
}

func (verifier *VerifierMockDatabase) Close() *MockDatabase_Close_OngoingVerification {
	_params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Close", _params, verifier.timeout)
	return &MockDatabase_Close_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDatabase_Close_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDatabase_Close_OngoingVerification) GetCapturedArguments() {
}

func (c *MockDatabase_Close_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockDatabase) DeletePullStatus(pull models.PullRequest) *MockDatabase_DeletePullStatus_OngoingVerification {
	_params := []pegomock.Param{pull}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "DeletePullStatus", _params, verifier.timeout)
	return &MockDatabase_DeletePullStatus_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDatabase_DeletePullStatus_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDatabase_DeletePullStatus_OngoingVerification) GetCapturedArguments() models.PullRequest {
	pull := c.GetAllCapturedArguments()
	return pull[len(pull)-1]
}

func (c *MockDatabase_DeletePullStatus_OngoingVerification) GetAllCapturedArguments() (_param0 []models.PullRequest) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]models.PullRequest, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(models.PullRequest)
			}
		}
	}
	return
}

func (verifier *VerifierMockDatabase) GetLock(project models.Project, workspace string) *MockDatabase_GetLock_OngoingVerification {
	_params := []pegomock.Param{project, workspace}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetLock", _params, verifier.timeout)
	return &MockDatabase_GetLock_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDatabase_GetLock_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDatabase_GetLock_OngoingVerification) GetCapturedArguments() (models.Project, string) {
	project, workspace := c.GetAllCapturedArguments()
	return project[len(project)-1], workspace[len(workspace)-1]
}

func (c *MockDatabase_GetLock_OngoingVerification) GetAllCapturedArguments() (_param0 []models.Project, _param1 []string) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]models.Project, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(models.Project)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]string, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(string)
			}
		}
	}
	return
}

func (verifier *VerifierMockDatabase) GetPullStatus(pull models.PullRequest) *MockDatabase_GetPullStatus_OngoingVerification {
	_params := []pegomock.Param{pull}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetPullStatus", _params, verifier.timeout)
	return &MockDatabase_GetPullStatus_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDatabase_GetPullStatus_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDatabase_GetPullStatus_OngoingVerification) GetCapturedArguments() models.PullRequest {
	pull := c.GetAllCapturedArguments()
	return pull[len(pull)-1]
}

func (c *MockDatabase_GetPullStatus_OngoingVerification) GetAllCapturedArguments() (_param0 []models.PullRequest) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]models.PullRequest, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(models.PullRequest)
			}
		}
	}
	return
}

func (verifier *VerifierMockDatabase) List() *MockDatabase_List_OngoingVerification {
	_params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "List", _params, verifier.timeout)
	return &MockDatabase_List_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDatabase_List_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDatabase_List_OngoingVerification) GetCapturedArguments() {
}

func (c *MockDatabase_List_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockDatabase) LockCommand(cmdName command.Name, lockTime time.Time) *MockDatabase_LockCommand_OngoingVerification {
	_params := []pegomock.Param{cmdName, lockTime}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "LockCommand", _params, verifier.timeout)
	return &MockDatabase_LockCommand_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDatabase_LockCommand_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDatabase_LockCommand_OngoingVerification) GetCapturedArguments() (command.Name, time.Time) {
	cmdName, lockTime := c.GetAllCapturedArguments()
	return cmdName[len(cmdName)-1], lockTime[len(lockTime)-1]
}

func (c *MockDatabase_LockCommand_OngoingVerification) GetAllCapturedArguments() (_param0 []command.Name, _param1 []time.Time) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(command.Name)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]time.Time, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(time.Time)
			}
		}
	}
	return
}

func (verifier *VerifierMockDatabase) TryLock(lock models.ProjectLock) *MockDatabase_TryLock_OngoingVerification {
	_params := []pegomock.Param{lock}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "TryLock", _params, verifier.timeout)
	return &MockDatabase_TryLock_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDatabase_TryLock_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDatabase_TryLock_OngoingVerification) GetCapturedArguments() models.ProjectLock {
	lock := c.GetAllCapturedArguments()
	return lock[len(lock)-1]
}

func (c *MockDatabase_TryLock_OngoingVerification) GetAllCapturedArguments() (_param0 []models.ProjectLock) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]models.ProjectLock, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(models.ProjectLock)
			}
		}
	}
	return
}

func (verifier *VerifierMockDatabase) Unlock(project models.Project, workspace string) *MockDatabase_Unlock_OngoingVerification {
	_params := []pegomock.Param{project, workspace}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Unlock", _params, verifier.timeout)
	return &MockDatabase_Unlock_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDatabase_Unlock_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDatabase_Unlock_OngoingVerification) GetCapturedArguments() (models.Project, string) {
	project, workspace := c.GetAllCapturedArguments()
	return project[len(project)-1], workspace[len(workspace)-1]
}

func (c *MockDatabase_Unlock_OngoingVerification) GetAllCapturedArguments() (_param0 []models.Project, _param1 []string) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]models.Project, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(models.Project)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]string, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(string)
			}
		}
	}
	return
}

func (verifier *VerifierMockDatabase) UnlockByPull(repoFullName string, pullNum int) *MockDatabase_UnlockByPull_OngoingVerification {
	_params := []pegomock.Param{repoFullName, pullNum}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "UnlockByPull", _params, verifier.timeout)
	return &MockDatabase_UnlockByPull_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDatabase_UnlockByPull_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDatabase_UnlockByPull_OngoingVerification) GetCapturedArguments() (string, int) {
	repoFullName, pullNum := c.GetAllCapturedArguments()
	return repoFullName[len(repoFullName)-1], pullNum[len(pullNum)-1]
}

func (c *MockDatabase_UnlockByPull_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []int) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]string, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(string)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]int, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(int)
			}
		}
	}
	return
}

func (verifier *VerifierMockDatabase) UnlockCommand(cmdName command.Name) *MockDatabase_UnlockCommand_OngoingVerification {
	_params := []pegomock.Param{cmdName}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "UnlockCommand", _params, verifier.timeout)
	return &MockDatabase_UnlockCommand_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDatabase_UnlockCommand_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDatabase_UnlockCommand_OngoingVerification) GetCapturedArguments() command.Name {
	cmdName := c.GetAllCapturedArguments()
	return cmdName[len(cmdName)-1]
}

func (c *MockDatabase_UnlockCommand_OngoingVerification) GetAllCapturedArguments() (_param0 []command.Name) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]command.Name, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(command.Name)
			}
		}
	}
	return
}

func (verifier *VerifierMockDatabase) UpdateProjectStatus(pull models.PullRequest, workspace string, repoRelDir string, newStatus models.ProjectPlanStatus) *MockDatabase_UpdateProjectStatus_OngoingVerification {
	_params := []pegomock.Param{pull, workspace, repoRelDir, newStatus}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "UpdateProjectStatus", _params, verifier.timeout)
	return &MockDatabase_UpdateProjectStatus_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDatabase_UpdateProjectStatus_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDatabase_UpdateProjectStatus_OngoingVerification) GetCapturedArguments() (models.PullRequest, string, string, models.ProjectPlanStatus) {
	pull, workspace, repoRelDir, newStatus := c.GetAllCapturedArguments()
	return pull[len(pull)-1], workspace[len(workspace)-1], repoRelDir[len(repoRelDir)-1], newStatus[len(newStatus)-1]
}

func (c *MockDatabase_UpdateProjectStatus_OngoingVerification) GetAllCapturedArguments() (_param0 []models.PullRequest, _param1 []string, _param2 []string, _param3 []models.ProjectPlanStatus) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]models.PullRequest, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(models.PullRequest)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]string, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(string)
			}
		}
		if len(_params) > 2 {
			_param2 = make([]string, len(c.methodInvocations))
			for u, param := range _params[2] {
				_param2[u] = param.(string)
			}
		}
		if len(_params) > 3 {
			_param3 = make([]models.ProjectPlanStatus, len(c.methodInvocations))
			for u, param := range _params[3] {
				_param3[u] = param.(models.ProjectPlanStatus)
			}
		}
	}
	return
}

func (verifier *VerifierMockDatabase) UpdatePullWithResults(pull models.PullRequest, newResults []command.ProjectResult) *MockDatabase_UpdatePullWithResults_OngoingVerification {
	_params := []pegomock.Param{pull, newResults}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "UpdatePullWithResults", _params, verifier.timeout)
	return &MockDatabase_UpdatePullWithResults_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDatabase_UpdatePullWithResults_OngoingVerification struct {
	mock              *MockDatabase
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDatabase_UpdatePullWithResults_OngoingVerification) GetCapturedArguments() (models.PullRequest, []command.ProjectResult) {
	pull, newResults := c.GetAllCapturedArguments()
	return pull[len(pull)-1], newResults[len(newResults)-1]
}

func (c *MockDatabase_UpdatePullWithResults_OngoingVerification) GetAllCapturedArguments() (_param0 []models.PullRequest, _param1 [][]command.ProjectResult) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]models.PullRequest, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(models.PullRequest)
			}
		}
		if len(_params) > 1 {
			_param1 = make([][]command.ProjectResult, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.([]command.ProjectResult)
			}
		}
	}
	return
}
