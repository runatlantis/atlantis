// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/runtime/models (interfaces: FilePath)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_filepath.go -package=mocks . FilePath
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/runatlantis/atlantis/server/core/runtime/models"
	gomock "go.uber.org/mock/gomock"
)

// MockFilePath is a mock of FilePath interface.
type MockFilePath struct {
	ctrl     *gomock.Controller
	recorder *MockFilePathMockRecorder
	isgomock struct{}
}

// MockFilePathMockRecorder is the mock recorder for MockFilePath.
type MockFilePathMockRecorder struct {
	mock *MockFilePath
}

// NewMockFilePath creates a new mock instance.
func NewMockFilePath(ctrl *gomock.Controller) *MockFilePath {
	mock := &MockFilePath{ctrl: ctrl}
	mock.recorder = &MockFilePathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilePath) EXPECT() *MockFilePathMockRecorder {
	return m.recorder
}

// Join mocks base method.
func (m *MockFilePath) Join(elem ...string) models.FilePath {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range elem {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(models.FilePath)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockFilePathMockRecorder) Join(elem ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockFilePath)(nil).Join), elem...)
}

// NotExists mocks base method.
func (m *MockFilePath) NotExists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotExists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NotExists indicates an expected call of NotExists.
func (mr *MockFilePathMockRecorder) NotExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotExists", reflect.TypeOf((*MockFilePath)(nil).NotExists))
}

// Resolve mocks base method.
func (m *MockFilePath) Resolve() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve")
	ret0, _ := ret[0].(string)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockFilePathMockRecorder) Resolve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockFilePath)(nil).Resolve))
}

// Symlink mocks base method.
func (m *MockFilePath) Symlink(newname string) (models.FilePath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Symlink", newname)
	ret0, _ := ret[0].(models.FilePath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Symlink indicates an expected call of Symlink.
func (mr *MockFilePathMockRecorder) Symlink(newname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Symlink", reflect.TypeOf((*MockFilePath)(nil).Symlink), newname)
}
