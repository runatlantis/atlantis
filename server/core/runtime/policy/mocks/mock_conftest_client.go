// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/runtime/policy (interfaces: SourceResolver)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_conftest_client.go -package=mocks . SourceResolver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	valid "github.com/runatlantis/atlantis/server/core/config/valid"
	gomock "go.uber.org/mock/gomock"
)

// MockSourceResolver is a mock of SourceResolver interface.
type MockSourceResolver struct {
	ctrl     *gomock.Controller
	recorder *MockSourceResolverMockRecorder
	isgomock struct{}
}

// MockSourceResolverMockRecorder is the mock recorder for MockSourceResolver.
type MockSourceResolverMockRecorder struct {
	mock *MockSourceResolver
}

// NewMockSourceResolver creates a new mock instance.
func NewMockSourceResolver(ctrl *gomock.Controller) *MockSourceResolver {
	mock := &MockSourceResolver{ctrl: ctrl}
	mock.recorder = &MockSourceResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceResolver) EXPECT() *MockSourceResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockSourceResolver) Resolve(policySet valid.PolicySet) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", policySet)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockSourceResolverMockRecorder) Resolve(policySet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockSourceResolver)(nil).Resolve), policySet)
}
