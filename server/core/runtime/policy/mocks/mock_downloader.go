// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/runtime/policy (interfaces: Downloader)

package mocks

import (
	pegomock "github.com/petergtz/pegomock/v4"
	"reflect"
	"time"
)

type MockDownloader struct {
	fail func(message string, callerSkip ...int)
}

func NewMockDownloader(options ...pegomock.Option) *MockDownloader {
	mock := &MockDownloader{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockDownloader) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockDownloader) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockDownloader) GetAny(dst string, src string) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockDownloader().")
	}
	_params := []pegomock.Param{dst, src}
	_result := pegomock.GetGenericMockFrom(mock).Invoke("GetAny", _params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var _ret0 error
	if len(_result) != 0 {
		if _result[0] != nil {
			_ret0 = _result[0].(error)
		}
	}
	return _ret0
}

func (mock *MockDownloader) VerifyWasCalledOnce() *VerifierMockDownloader {
	return &VerifierMockDownloader{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockDownloader) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockDownloader {
	return &VerifierMockDownloader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockDownloader) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockDownloader {
	return &VerifierMockDownloader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockDownloader) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockDownloader {
	return &VerifierMockDownloader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockDownloader struct {
	mock                   *MockDownloader
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockDownloader) GetAny(dst string, src string) *MockDownloader_GetAny_OngoingVerification {
	_params := []pegomock.Param{dst, src}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetAny", _params, verifier.timeout)
	return &MockDownloader_GetAny_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockDownloader_GetAny_OngoingVerification struct {
	mock              *MockDownloader
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockDownloader_GetAny_OngoingVerification) GetCapturedArguments() (string, string) {
	dst, src := c.GetAllCapturedArguments()
	return dst[len(dst)-1], src[len(src)-1]
}

func (c *MockDownloader_GetAny_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 []string) {
	_params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(_params) > 0 {
		if len(_params) > 0 {
			_param0 = make([]string, len(c.methodInvocations))
			for u, param := range _params[0] {
				_param0[u] = param.(string)
			}
		}
		if len(_params) > 1 {
			_param1 = make([]string, len(c.methodInvocations))
			for u, param := range _params[1] {
				_param1[u] = param.(string)
			}
		}
	}
	return
}
