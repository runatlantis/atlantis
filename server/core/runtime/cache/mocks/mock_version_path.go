// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/runtime/cache (interfaces: ExecutionVersionCache)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_version_path.go -package=mocks . ExecutionVersionCache
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	version "github.com/hashicorp/go-version"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutionVersionCache is a mock of ExecutionVersionCache interface.
type MockExecutionVersionCache struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionVersionCacheMockRecorder
	isgomock struct{}
}

// MockExecutionVersionCacheMockRecorder is the mock recorder for MockExecutionVersionCache.
type MockExecutionVersionCacheMockRecorder struct {
	mock *MockExecutionVersionCache
}

// NewMockExecutionVersionCache creates a new mock instance.
func NewMockExecutionVersionCache(ctrl *gomock.Controller) *MockExecutionVersionCache {
	mock := &MockExecutionVersionCache{ctrl: ctrl}
	mock.recorder = &MockExecutionVersionCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionVersionCache) EXPECT() *MockExecutionVersionCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockExecutionVersionCache) Get(key *version.Version) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExecutionVersionCacheMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExecutionVersionCache)(nil).Get), key)
}
