// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/runtime (interfaces: ExternalTeamAllowlistRunner)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_external_team_allowlist_runner.go -package=mocks . ExternalTeamAllowlistRunner
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/runatlantis/atlantis/server/events/models"
	gomock "go.uber.org/mock/gomock"
)

// MockExternalTeamAllowlistRunner is a mock of ExternalTeamAllowlistRunner interface.
type MockExternalTeamAllowlistRunner struct {
	ctrl     *gomock.Controller
	recorder *MockExternalTeamAllowlistRunnerMockRecorder
	isgomock struct{}
}

// MockExternalTeamAllowlistRunnerMockRecorder is the mock recorder for MockExternalTeamAllowlistRunner.
type MockExternalTeamAllowlistRunnerMockRecorder struct {
	mock *MockExternalTeamAllowlistRunner
}

// NewMockExternalTeamAllowlistRunner creates a new mock instance.
func NewMockExternalTeamAllowlistRunner(ctrl *gomock.Controller) *MockExternalTeamAllowlistRunner {
	mock := &MockExternalTeamAllowlistRunner{ctrl: ctrl}
	mock.recorder = &MockExternalTeamAllowlistRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalTeamAllowlistRunner) EXPECT() *MockExternalTeamAllowlistRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockExternalTeamAllowlistRunner) Run(ctx models.TeamAllowlistCheckerContext, shell, shellArgs, command string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, shell, shellArgs, command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockExternalTeamAllowlistRunnerMockRecorder) Run(ctx, shell, shellArgs, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockExternalTeamAllowlistRunner)(nil).Run), ctx, shell, shellArgs, command)
}
