// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/runtime (interfaces: PostWorkflowHookRunner)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_post_workflows_hook_runner.go -package=mocks . PostWorkflowHookRunner
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/runatlantis/atlantis/server/events/models"
	gomock "go.uber.org/mock/gomock"
)

// MockPostWorkflowHookRunner is a mock of PostWorkflowHookRunner interface.
type MockPostWorkflowHookRunner struct {
	ctrl     *gomock.Controller
	recorder *MockPostWorkflowHookRunnerMockRecorder
	isgomock struct{}
}

// MockPostWorkflowHookRunnerMockRecorder is the mock recorder for MockPostWorkflowHookRunner.
type MockPostWorkflowHookRunnerMockRecorder struct {
	mock *MockPostWorkflowHookRunner
}

// NewMockPostWorkflowHookRunner creates a new mock instance.
func NewMockPostWorkflowHookRunner(ctrl *gomock.Controller) *MockPostWorkflowHookRunner {
	mock := &MockPostWorkflowHookRunner{ctrl: ctrl}
	mock.recorder = &MockPostWorkflowHookRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostWorkflowHookRunner) EXPECT() *MockPostWorkflowHookRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockPostWorkflowHookRunner) Run(ctx models.WorkflowHookCommandContext, command, shell, shellArgs, path string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, command, shell, shellArgs, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Run indicates an expected call of Run.
func (mr *MockPostWorkflowHookRunnerMockRecorder) Run(ctx, command, shell, shellArgs, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPostWorkflowHookRunner)(nil).Run), ctx, command, shell, shellArgs, path)
}
