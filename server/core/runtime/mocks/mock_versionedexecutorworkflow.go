// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/runtime (interfaces: VersionedExecutorWorkflow)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_versionedexecutorworkflow.go -package=mocks . VersionedExecutorWorkflow
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	version "github.com/hashicorp/go-version"
	command "github.com/runatlantis/atlantis/server/events/command"
	logging "github.com/runatlantis/atlantis/server/logging"
	gomock "go.uber.org/mock/gomock"
)

// MockVersionedExecutorWorkflow is a mock of VersionedExecutorWorkflow interface.
type MockVersionedExecutorWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MockVersionedExecutorWorkflowMockRecorder
	isgomock struct{}
}

// MockVersionedExecutorWorkflowMockRecorder is the mock recorder for MockVersionedExecutorWorkflow.
type MockVersionedExecutorWorkflowMockRecorder struct {
	mock *MockVersionedExecutorWorkflow
}

// NewMockVersionedExecutorWorkflow creates a new mock instance.
func NewMockVersionedExecutorWorkflow(ctrl *gomock.Controller) *MockVersionedExecutorWorkflow {
	mock := &MockVersionedExecutorWorkflow{ctrl: ctrl}
	mock.recorder = &MockVersionedExecutorWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionedExecutorWorkflow) EXPECT() *MockVersionedExecutorWorkflowMockRecorder {
	return m.recorder
}

// EnsureExecutorVersion mocks base method.
func (m *MockVersionedExecutorWorkflow) EnsureExecutorVersion(log logging.SimpleLogging, v *version.Version) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureExecutorVersion", log, v)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureExecutorVersion indicates an expected call of EnsureExecutorVersion.
func (mr *MockVersionedExecutorWorkflowMockRecorder) EnsureExecutorVersion(log, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureExecutorVersion", reflect.TypeOf((*MockVersionedExecutorWorkflow)(nil).EnsureExecutorVersion), log, v)
}

// Run mocks base method.
func (m *MockVersionedExecutorWorkflow) Run(ctx command.ProjectContext, executablePath string, envs map[string]string, workdir string, extraArgs []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, executablePath, envs, workdir, extraArgs)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockVersionedExecutorWorkflowMockRecorder) Run(ctx, executablePath, envs, workdir, extraArgs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockVersionedExecutorWorkflow)(nil).Run), ctx, executablePath, envs, workdir, extraArgs)
}
