// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/runtime (interfaces: AsyncTFExec)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_async_tfexec.go -package=mocks . AsyncTFExec
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	version "github.com/hashicorp/go-version"
	models "github.com/runatlantis/atlantis/server/core/runtime/models"
	terraform "github.com/runatlantis/atlantis/server/core/terraform"
	command "github.com/runatlantis/atlantis/server/events/command"
	gomock "go.uber.org/mock/gomock"
)

// MockAsyncTFExec is a mock of AsyncTFExec interface.
type MockAsyncTFExec struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncTFExecMockRecorder
	isgomock struct{}
}

// MockAsyncTFExecMockRecorder is the mock recorder for MockAsyncTFExec.
type MockAsyncTFExecMockRecorder struct {
	mock *MockAsyncTFExec
}

// NewMockAsyncTFExec creates a new mock instance.
func NewMockAsyncTFExec(ctrl *gomock.Controller) *MockAsyncTFExec {
	mock := &MockAsyncTFExec{ctrl: ctrl}
	mock.recorder = &MockAsyncTFExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncTFExec) EXPECT() *MockAsyncTFExecMockRecorder {
	return m.recorder
}

// RunCommandAsync mocks base method.
func (m *MockAsyncTFExec) RunCommandAsync(ctx command.ProjectContext, path string, args []string, envs map[string]string, d terraform.Distribution, v *version.Version, workspace string) (chan<- string, <-chan models.Line) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCommandAsync", ctx, path, args, envs, d, v, workspace)
	ret0, _ := ret[0].(chan<- string)
	ret1, _ := ret[1].(<-chan models.Line)
	return ret0, ret1
}

// RunCommandAsync indicates an expected call of RunCommandAsync.
func (mr *MockAsyncTFExecMockRecorder) RunCommandAsync(ctx, path, args, envs, d, v, workspace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommandAsync", reflect.TypeOf((*MockAsyncTFExec)(nil).RunCommandAsync), ctx, path, args, envs, d, v, workspace)
}
