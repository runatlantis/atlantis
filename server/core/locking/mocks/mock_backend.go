// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/locking (interfaces: Backend)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_backend.go -package=mocks . Backend
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	command "github.com/runatlantis/atlantis/server/events/command"
	models "github.com/runatlantis/atlantis/server/events/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
	isgomock struct{}
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// CheckCommandLock mocks base method.
func (m *MockBackend) CheckCommandLock(cmdName command.Name) (*command.Lock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCommandLock", cmdName)
	ret0, _ := ret[0].(*command.Lock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCommandLock indicates an expected call of CheckCommandLock.
func (mr *MockBackendMockRecorder) CheckCommandLock(cmdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCommandLock", reflect.TypeOf((*MockBackend)(nil).CheckCommandLock), cmdName)
}

// DeletePullStatus mocks base method.
func (m *MockBackend) DeletePullStatus(pull models.PullRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePullStatus", pull)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePullStatus indicates an expected call of DeletePullStatus.
func (mr *MockBackendMockRecorder) DeletePullStatus(pull any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePullStatus", reflect.TypeOf((*MockBackend)(nil).DeletePullStatus), pull)
}

// GetLock mocks base method.
func (m *MockBackend) GetLock(project models.Project, workspace string) (*models.ProjectLock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLock", project, workspace)
	ret0, _ := ret[0].(*models.ProjectLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLock indicates an expected call of GetLock.
func (mr *MockBackendMockRecorder) GetLock(project, workspace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLock", reflect.TypeOf((*MockBackend)(nil).GetLock), project, workspace)
}

// GetPullStatus mocks base method.
func (m *MockBackend) GetPullStatus(pull models.PullRequest) (*models.PullStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullStatus", pull)
	ret0, _ := ret[0].(*models.PullStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullStatus indicates an expected call of GetPullStatus.
func (mr *MockBackendMockRecorder) GetPullStatus(pull any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullStatus", reflect.TypeOf((*MockBackend)(nil).GetPullStatus), pull)
}

// List mocks base method.
func (m *MockBackend) List() ([]models.ProjectLock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]models.ProjectLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBackendMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBackend)(nil).List))
}

// LockCommand mocks base method.
func (m *MockBackend) LockCommand(cmdName command.Name, lockTime time.Time) (*command.Lock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockCommand", cmdName, lockTime)
	ret0, _ := ret[0].(*command.Lock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockCommand indicates an expected call of LockCommand.
func (mr *MockBackendMockRecorder) LockCommand(cmdName, lockTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockCommand", reflect.TypeOf((*MockBackend)(nil).LockCommand), cmdName, lockTime)
}

// TryLock mocks base method.
func (m *MockBackend) TryLock(lock models.ProjectLock) (bool, models.ProjectLock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLock", lock)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(models.ProjectLock)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TryLock indicates an expected call of TryLock.
func (mr *MockBackendMockRecorder) TryLock(lock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockBackend)(nil).TryLock), lock)
}

// Unlock mocks base method.
func (m *MockBackend) Unlock(project models.Project, workspace string) (*models.ProjectLock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", project, workspace)
	ret0, _ := ret[0].(*models.ProjectLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlock indicates an expected call of Unlock.
func (mr *MockBackendMockRecorder) Unlock(project, workspace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockBackend)(nil).Unlock), project, workspace)
}

// UnlockByPull mocks base method.
func (m *MockBackend) UnlockByPull(repoFullName string, pullNum int) ([]models.ProjectLock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockByPull", repoFullName, pullNum)
	ret0, _ := ret[0].([]models.ProjectLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockByPull indicates an expected call of UnlockByPull.
func (mr *MockBackendMockRecorder) UnlockByPull(repoFullName, pullNum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockByPull", reflect.TypeOf((*MockBackend)(nil).UnlockByPull), repoFullName, pullNum)
}

// UnlockCommand mocks base method.
func (m *MockBackend) UnlockCommand(cmdName command.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockCommand", cmdName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockCommand indicates an expected call of UnlockCommand.
func (mr *MockBackendMockRecorder) UnlockCommand(cmdName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockCommand", reflect.TypeOf((*MockBackend)(nil).UnlockCommand), cmdName)
}

// UpdateProjectStatus mocks base method.
func (m *MockBackend) UpdateProjectStatus(pull models.PullRequest, workspace, repoRelDir string, newStatus models.ProjectPlanStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectStatus", pull, workspace, repoRelDir, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProjectStatus indicates an expected call of UpdateProjectStatus.
func (mr *MockBackendMockRecorder) UpdateProjectStatus(pull, workspace, repoRelDir, newStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectStatus", reflect.TypeOf((*MockBackend)(nil).UpdateProjectStatus), pull, workspace, repoRelDir, newStatus)
}

// UpdatePullWithResults mocks base method.
func (m *MockBackend) UpdatePullWithResults(pull models.PullRequest, newResults []command.ProjectResult) (models.PullStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePullWithResults", pull, newResults)
	ret0, _ := ret[0].(models.PullStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePullWithResults indicates an expected call of UpdatePullWithResults.
func (mr *MockBackendMockRecorder) UpdatePullWithResults(pull, newResults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePullWithResults", reflect.TypeOf((*MockBackend)(nil).UpdatePullWithResults), pull, newResults)
}
