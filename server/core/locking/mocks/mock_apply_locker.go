// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/locking (interfaces: ApplyLocker)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_apply_locker.go -package=mocks . ApplyLocker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	locking "github.com/runatlantis/atlantis/server/core/locking"
	gomock "go.uber.org/mock/gomock"
)

// MockApplyLocker is a mock of ApplyLocker interface.
type MockApplyLocker struct {
	ctrl     *gomock.Controller
	recorder *MockApplyLockerMockRecorder
	isgomock struct{}
}

// MockApplyLockerMockRecorder is the mock recorder for MockApplyLocker.
type MockApplyLockerMockRecorder struct {
	mock *MockApplyLocker
}

// NewMockApplyLocker creates a new mock instance.
func NewMockApplyLocker(ctrl *gomock.Controller) *MockApplyLocker {
	mock := &MockApplyLocker{ctrl: ctrl}
	mock.recorder = &MockApplyLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplyLocker) EXPECT() *MockApplyLockerMockRecorder {
	return m.recorder
}

// CheckApplyLock mocks base method.
func (m *MockApplyLocker) CheckApplyLock() (locking.ApplyCommandLock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckApplyLock")
	ret0, _ := ret[0].(locking.ApplyCommandLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckApplyLock indicates an expected call of CheckApplyLock.
func (mr *MockApplyLockerMockRecorder) CheckApplyLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckApplyLock", reflect.TypeOf((*MockApplyLocker)(nil).CheckApplyLock))
}

// LockApply mocks base method.
func (m *MockApplyLocker) LockApply() (locking.ApplyCommandLock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockApply")
	ret0, _ := ret[0].(locking.ApplyCommandLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockApply indicates an expected call of LockApply.
func (mr *MockApplyLockerMockRecorder) LockApply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockApply", reflect.TypeOf((*MockApplyLocker)(nil).LockApply))
}

// UnlockApply mocks base method.
func (m *MockApplyLocker) UnlockApply() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockApply")
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockApply indicates an expected call of UnlockApply.
func (mr *MockApplyLockerMockRecorder) UnlockApply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockApply", reflect.TypeOf((*MockApplyLocker)(nil).UnlockApply))
}
