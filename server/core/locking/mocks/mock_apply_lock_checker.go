// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/core/locking (interfaces: ApplyLockChecker)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_apply_lock_checker.go -package=mocks . ApplyLockChecker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	locking "github.com/runatlantis/atlantis/server/core/locking"
	gomock "go.uber.org/mock/gomock"
)

// MockApplyLockChecker is a mock of ApplyLockChecker interface.
type MockApplyLockChecker struct {
	ctrl     *gomock.Controller
	recorder *MockApplyLockCheckerMockRecorder
	isgomock struct{}
}

// MockApplyLockCheckerMockRecorder is the mock recorder for MockApplyLockChecker.
type MockApplyLockCheckerMockRecorder struct {
	mock *MockApplyLockChecker
}

// NewMockApplyLockChecker creates a new mock instance.
func NewMockApplyLockChecker(ctrl *gomock.Controller) *MockApplyLockChecker {
	mock := &MockApplyLockChecker{ctrl: ctrl}
	mock.recorder = &MockApplyLockCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplyLockChecker) EXPECT() *MockApplyLockCheckerMockRecorder {
	return m.recorder
}

// CheckApplyLock mocks base method.
func (m *MockApplyLockChecker) CheckApplyLock() (locking.ApplyCommandLock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckApplyLock")
	ret0, _ := ret[0].(locking.ApplyCommandLock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckApplyLock indicates an expected call of CheckApplyLock.
func (mr *MockApplyLockCheckerMockRecorder) CheckApplyLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckApplyLock", reflect.TypeOf((*MockApplyLockChecker)(nil).CheckApplyLock))
}
