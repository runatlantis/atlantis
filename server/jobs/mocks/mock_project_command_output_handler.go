// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/jobs (interfaces: ProjectCommandOutputHandler)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_project_command_output_handler.go -package=mocks . ProjectCommandOutputHandler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	command "github.com/runatlantis/atlantis/server/events/command"
	models "github.com/runatlantis/atlantis/server/events/models"
	jobs "github.com/runatlantis/atlantis/server/jobs"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectCommandOutputHandler is a mock of ProjectCommandOutputHandler interface.
type MockProjectCommandOutputHandler struct {
	ctrl     *gomock.Controller
	recorder *MockProjectCommandOutputHandlerMockRecorder
	isgomock struct{}
}

// MockProjectCommandOutputHandlerMockRecorder is the mock recorder for MockProjectCommandOutputHandler.
type MockProjectCommandOutputHandlerMockRecorder struct {
	mock *MockProjectCommandOutputHandler
}

// NewMockProjectCommandOutputHandler creates a new mock instance.
func NewMockProjectCommandOutputHandler(ctrl *gomock.Controller) *MockProjectCommandOutputHandler {
	mock := &MockProjectCommandOutputHandler{ctrl: ctrl}
	mock.recorder = &MockProjectCommandOutputHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectCommandOutputHandler) EXPECT() *MockProjectCommandOutputHandlerMockRecorder {
	return m.recorder
}

// CleanUp mocks base method.
func (m *MockProjectCommandOutputHandler) CleanUp(pullInfo jobs.PullInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanUp", pullInfo)
}

// CleanUp indicates an expected call of CleanUp.
func (mr *MockProjectCommandOutputHandlerMockRecorder) CleanUp(pullInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUp", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).CleanUp), pullInfo)
}

// Deregister mocks base method.
func (m *MockProjectCommandOutputHandler) Deregister(jobID string, receiver chan string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Deregister", jobID, receiver)
}

// Deregister indicates an expected call of Deregister.
func (mr *MockProjectCommandOutputHandlerMockRecorder) Deregister(jobID, receiver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deregister", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).Deregister), jobID, receiver)
}

// GetPullToJobMapping mocks base method.
func (m *MockProjectCommandOutputHandler) GetPullToJobMapping() []jobs.PullInfoWithJobIDs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullToJobMapping")
	ret0, _ := ret[0].([]jobs.PullInfoWithJobIDs)
	return ret0
}

// GetPullToJobMapping indicates an expected call of GetPullToJobMapping.
func (mr *MockProjectCommandOutputHandlerMockRecorder) GetPullToJobMapping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullToJobMapping", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).GetPullToJobMapping))
}

// Handle mocks base method.
func (m *MockProjectCommandOutputHandler) Handle() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle")
}

// Handle indicates an expected call of Handle.
func (mr *MockProjectCommandOutputHandlerMockRecorder) Handle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).Handle))
}

// IsKeyExists mocks base method.
func (m *MockProjectCommandOutputHandler) IsKeyExists(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKeyExists", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKeyExists indicates an expected call of IsKeyExists.
func (mr *MockProjectCommandOutputHandlerMockRecorder) IsKeyExists(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKeyExists", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).IsKeyExists), key)
}

// Register mocks base method.
func (m *MockProjectCommandOutputHandler) Register(jobID string, receiver chan string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", jobID, receiver)
}

// Register indicates an expected call of Register.
func (mr *MockProjectCommandOutputHandlerMockRecorder) Register(jobID, receiver any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).Register), jobID, receiver)
}

// Send mocks base method.
func (m *MockProjectCommandOutputHandler) Send(ctx command.ProjectContext, msg string, operationComplete bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", ctx, msg, operationComplete)
}

// Send indicates an expected call of Send.
func (mr *MockProjectCommandOutputHandlerMockRecorder) Send(ctx, msg, operationComplete any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).Send), ctx, msg, operationComplete)
}

// SendWorkflowHook mocks base method.
func (m *MockProjectCommandOutputHandler) SendWorkflowHook(ctx models.WorkflowHookCommandContext, msg string, operationComplete bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendWorkflowHook", ctx, msg, operationComplete)
}

// SendWorkflowHook indicates an expected call of SendWorkflowHook.
func (mr *MockProjectCommandOutputHandlerMockRecorder) SendWorkflowHook(ctx, msg, operationComplete any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWorkflowHook", reflect.TypeOf((*MockProjectCommandOutputHandler)(nil).SendWorkflowHook), ctx, msg, operationComplete)
}
