// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/runatlantis/atlantis/server/jobs (interfaces: StorageBackend)

package mocks

import (
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockStorageBackend struct {
	fail func(message string, callerSkip ...int)
}

func NewMockStorageBackend(options ...pegomock.Option) *MockStorageBackend {
	mock := &MockStorageBackend{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockStorageBackend) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockStorageBackend) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockStorageBackend) Read(_param0 string) ([]string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStorageBackend().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Read", params, []reflect.Type{reflect.TypeOf((*[]string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 []string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].([]string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockStorageBackend) Write(_param0 string, _param1 []string) (bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockStorageBackend().")
	}
	params := []pegomock.Param{_param0, _param1}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Write", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockStorageBackend) VerifyWasCalledOnce() *VerifierMockStorageBackend {
	return &VerifierMockStorageBackend{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockStorageBackend) VerifyWasCalled(invocationCountMatcher pegomock.InvocationCountMatcher) *VerifierMockStorageBackend {
	return &VerifierMockStorageBackend{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockStorageBackend) VerifyWasCalledInOrder(invocationCountMatcher pegomock.InvocationCountMatcher, inOrderContext *pegomock.InOrderContext) *VerifierMockStorageBackend {
	return &VerifierMockStorageBackend{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockStorageBackend) VerifyWasCalledEventually(invocationCountMatcher pegomock.InvocationCountMatcher, timeout time.Duration) *VerifierMockStorageBackend {
	return &VerifierMockStorageBackend{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockStorageBackend struct {
	mock                   *MockStorageBackend
	invocationCountMatcher pegomock.InvocationCountMatcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockStorageBackend) Read(_param0 string) *MockStorageBackend_Read_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Read", params, verifier.timeout)
	return &MockStorageBackend_Read_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStorageBackend_Read_OngoingVerification struct {
	mock              *MockStorageBackend
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStorageBackend_Read_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockStorageBackend_Read_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockStorageBackend) Write(_param0 string, _param1 []string) *MockStorageBackend_Write_OngoingVerification {
	params := []pegomock.Param{_param0, _param1}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Write", params, verifier.timeout)
	return &MockStorageBackend_Write_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockStorageBackend_Write_OngoingVerification struct {
	mock              *MockStorageBackend
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockStorageBackend_Write_OngoingVerification) GetCapturedArguments() (string, []string) {
	_param0, _param1 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1], _param1[len(_param1)-1]
}

func (c *MockStorageBackend_Write_OngoingVerification) GetAllCapturedArguments() (_param0 []string, _param1 [][]string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
		_param1 = make([][]string, len(c.methodInvocations))
		for u, param := range params[1] {
			_param1[u] = param.([]string)
		}
	}
	return
}
