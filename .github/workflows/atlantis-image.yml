name: atlantis-image

on:
  push:
    branches:
      - 'main'
    tags:
      - v*.*.* # stable release like, v0.19.2
      - v*.*.*-pre.* # pre release like, v0.19.0-pre.calendardate
  pull_request:
    paths:
      - 'Dockerfile'
      - '.github/workflows/atlantis-image.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        image_type: [alpine, debian]
    runs-on: ubuntu-22.04
    env:
      # Set docker repo to either the fork or the main repo where the branch exists
      DOCKER_REPO: ${{ github.event.pull_request.head.repo.full_name }}
      # Push if not a pull request or this is a fork
      PUSH: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        image: tonistiigi/binfmt:latest
        platforms: arm64,arm

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      # related issues for pinning buildkit
      # https://github.com/docker/build-push-action/issues/761
      # https://github.com/containerd/containerd/issues/7972
      # https://github.com/containerd/containerd/pull/6995
      with:
        driver-opts: |
          image=moby/buildkit:v0.10.6

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ env.DOCKER_REPO }}
        labels: |
          org.opencontainers.image.licenses=Apache-2.0
        tags: |
          type=ref,event=pr,suffix=${{ format('-{0}', matrix.image_type) }}
          type=semver,pattern={{version}},suffix=${{ format('-{0}', matrix.image_type) }}
          type=semver,pattern={{major}}.{{minor}},suffix=${{ format('-{0}', matrix.image_type) }}
          type=sha,suffix=${{ format('-{0}', matrix.image_type) }}
          type=raw,event=push,value=dev,enable=${{ github.ref == format('refs/heads/{0}', 'main') && matrix.image_type == 'alpine' }}
          type=raw,event=push,value=dev,enable={{is_default_branch}},suffix=${{ format('-{0}', matrix.image_type) }}
          type=raw,event=tag,value=prerelease-latest,enable=${{ startsWith(github.ref, 'refs/tags/') && contains(github.ref, 'pre') && matrix.image_type == 'alpine' }}
          type=raw,event=tag,value=prerelease-latest,enable=${{ startsWith(github.ref, 'refs/tags/') && contains(github.ref, 'pre') }},suffix=${{ format('-{0}', matrix.image_type) }}
          type=raw,event=tag,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'pre') && matrix.image_type == 'alpine' }}
          type=raw,event=tag,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'pre') }},suffix=${{ format('-{0}', matrix.image_type) }}
        flavor: |
          latest=false

    - name: Login to Packages Container registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Publish release to container registry
    - name: Populate release version
      if: contains(fromJson('["push", "pull_request"]'), github.event_name)
      run: |
        echo "RELEASE_VERSION=${{ startsWith(github.ref, 'refs/tags/') && '${GITHUB_REF#refs/*/}' || 'dev' }}" >> $GITHUB_ENV
        echo "${{ github.event.pull_request.head.repo.full_name }}"

    - name: "Build ${{ env.PUSH && 'and push' || '' }} ${{ env.DOCKER_REPO }} image"
      if: contains(fromJson('["push", "pull_request"]'), github.event_name)
      uses: docker/build-push-action@v4
      with:
        cache-from: type=gha
        cache-to: type=gha,mode=max
        context: .
        build-args: |
          ATLANTIS_BASE_TAG_TYPE=${{ matrix.image_type }}
          ATLANTIS_VERSION=${{ env.RELEASE_VERSION }}
          ATLANTIS_COMMIT=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          ATLANTIS_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
        platforms: linux/arm64/v8,linux/amd64,linux/arm/v7
        push: ${{ env.PUSH }}
        # release version is the name of the tag i.e. v0.10.0
        # release version also has the image type appended i.e. v0.10.0-alpine
        # release tag is either pre-release or latest i.e. latest
        # release tag also has the image type appended i.e. latest-alpine
        # if it's v0.10.0 and alpine, it will do v0.10.0, v0.10.0-alpine, latest, latest-alpine
        # if it's v0.10.0 and debian, it will do v0.10.0-debian, latest-debian
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
